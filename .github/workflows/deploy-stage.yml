name: Deploy to stage
on:
  push:
    branches:
      - '**'
      - '!main'
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/[^[:alnum:].-]/-/g')" >> $GITHUB_ENV
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
      - uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
      - name: Ruby dependencies
        run: |
          gem install pry json
      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: yarn --frozen-lockfile
      - name: Copy API Spec
        id: copy_api_spec
        env:
          GITLAB_ACCESS_TOKEN: ${{ secrets.GITLAB_ACCESS_TOKEN }}
        run: |
          git clone https://oauth2:$GITLAB_ACCESS_TOKEN@gitlab.com/limelight-networks/cdn-analytics/core/server/eq-metrics-public-api.git
          rsync -av "eq-metrics-public-api/src/api/public-docs/components/" "rest_api/openapi/components"
          rsync -av "eq-metrics-public-api/src/api/public-docs/paths/" "rest_api/openapi/paths"
        continue-on-error: true
      - name: Check Copy API Spec Status
        if: always()
        run: |
          if [ ${{ steps.copy_api_spec.outcome }} == "failure" ]; then
            echo "COPY_API_SPEC_FAILED=true" >> $GITHUB_ENV
          else
            echo "COPY_API_SPEC_FAILED=false" >> $GITHUB_ENV
          fi
      - name: Deploy to docs.edg.io (stage)
        run: |
          yarn edgio:deploy --branch=$BRANCH_NAME --token=${{secrets.edgio_prod_deploy_token}} --environment=default
        env:
          GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
      - name: Process Deployment Manifest and Set Output
        id: deploy
        run: |
          # Read deployment manifest and parse JSON content
          content=$(cat .edgio/deployment-manifest.json)
          number=$(echo $content | jq -r .number)
          permalink=$(echo $content | jq -r .url)
          edgeUrl=$(echo $content | jq -r .environment.url)
          environmentName=$(echo $content | jq -r .environment.name)

          # Console URL
          consoleUrl="https://edgio.app/edgio-community/docs.edg.io/env/${environmentName}/builds/${number}"

          # Build permalink URL
          buildUrl=$permalink

          # Generate branchUrl by removing the -${number} part from the permalink
          branchUrl=$(echo $permalink | sed "s/-${number}//")

          deployDate=$(date +"%Y-%m-%d %H:%M:%S")

          # Set output variables
          echo "consoleUrl=${consoleUrl}" >> $GITHUB_OUTPUT
          echo "buildUrl=${buildUrl}" >> $GITHUB_OUTPUT
          echo "branchUrl=${branchUrl}" >> $GITHUB_OUTPUT
          echo "edgeUrl=${edgeUrl}" >> $GITHUB_OUTPUT
          echo "deployDate=${deployDate}" >> $GITHUB_OUTPUT
        shell: bash

      - uses: jwalton/gh-find-current-pr@v1
        id: finder
      - name: Publish Preview Link
        uses: marocchino/sticky-pull-request-comment@v2.2.0
        with:
          number: ${{ steps.finder.outputs.pr }}
          header: preview
          message: |
            ##### Last deployment (${{ steps.deploy.outputs.deployDate }}) ðŸš€
            - Console Build: ${{ steps.deploy.outputs.consoleUrl }}
            - Permalink Preview: ${{ steps.deploy.outputs.buildUrl }}
            - Branch Preview: ${{ steps.deploy.outputs.branchUrl }}
            - Edge URL: ${{ steps.deploy.outputs.edgeUrl }}
      - name: Final Check for Failures
        if: always()
        run: |
          if [ "$COPY_API_SPEC_FAILED" == "true" ]; then
            echo "One or more steps failed."
            exit 1
          fi
