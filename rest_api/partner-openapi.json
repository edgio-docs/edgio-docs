{
  "openapi": "3.0.1",
  "info": {
    "title": "Edgio REST API - Partner",
    "version": "0.1.0",
    "x-logo": {
      "url": "https://docs.edg.io/_next/static/media/edgio-dark.ea0d686f.webp",
      "backgroundColor": "#FFFFFF",
      "altText": "Logo",
      "href": "https://docs.edg.io"
    },
    "description": "Our REST-compliant web services facilitate the integration of our services into your workflow(s), applications, or interfaces.\n\n## Introduction\n\nKey information about our REST API services:\n\n-   **Protocol:** HTTPS\n    \n    Communication (i.e., request-response) with our web services is only permitted through HTTPS. This ensures the privacy and integrity of your data.\n\n-   **Authentication/Authorization:** `Authorization` Header\n    \n    Authenticate and authorize your requests by generating a token and then passing it through the `Authorization` header:\n       \n    ```\n    Authorization: Bearer <OAUTH 2.0 TOKEN>\n    ```\n    \n    [Get started.](#section/Quick-Start)\n\n-   **Request-Response (Accept and Content-Type):** JSON\n    \n    We expect the request body to use JavaScript Object Notation (JSON) format. Inform our web servers that the expected format for the request-response will be JSON through the `Accept` and `Content-Type` request headers.\n    \n-   **Programming Language:** Agnostic\n    \n    Our REST API services are designed to be programming language-agnostic. Feel free to use your preferred programming language (e.g., JavaScript, Python, C#, etc.).\n\n-   **Services:** Our REST API consists of the following services:\n\n    | Service      | Version | Functionality                                                                                                               |\n    | ------------ |-------- | --------------------------------------------------------------------------------------------------------------------------- |\n    | cache        | 0.1     | Purge cached content and find out purge status.                                                                             |\n    | config       | 0.1     | Deploy CDN configurations, retrieve deployment information and log data, and manage environment variables.                  |\n    | accounts     | 0.1     | Retrieve and manage organizations, properties, and environments.                                                            |\n    | waf          | 0.9     | Retrieve and manage the following configurations: security apps, access rules, rate rules, custom rules, and managed rules. |\n    | bot-security | 0.9     | Retrieve and manage bot manager configurations.                                                                             |\n    | api-security | 0.9     | Retrieve and manage API security configurations.                                                                            |\n\n    Each service is versioned independently. This allows us to apply major enhancements to a service without impacting other services.\n\n## Quick Start\n\nGet started with our latest APIs by performing the following steps:\n\n1. Create an API client within your partner account. Grant the set of scope(s) required by the endpoint(s) with which it will interact. Administer API clients from within the <a href=\"https://edgio.app\" target=\"_blank\">Edgio Console</a>. Navigate to your partner account landing page and then click on **API Clients**. \n2. Use this client's ID, secret key, and scopes to [generate a temporary access token](#section/Access-Tokens).\n3. Authorize your API requests by passing the temporary access token generated in the previous step through the `Authorization` request header.\n\n```\ncurl --request GET \\\n     --url https://edgioapis.com/waf/v0.9/12345678-1234-1234-1234-1234567890ab/scopes \\\n     --header 'Authorization: Bearer  A1bcbGciImtpZCI6Ij13N1VGQ01z...17cRRKYQ'\n```\n\n## Scopes\n\nA scope authorizes an API client to perform specific actions (e.g., create and retrieve configurations). One or more scope(s) must also be defined when requesting an access token. You may only specify a scope that has been explicitly granted or inherited from a broader scope. Common scopes are listed below.\n\n| Scope            | Description                                                                                                                                  |\n| ---------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |\n| app.cache        | Authorizes full access for purging cached content and retrieve purge status information.                                                     |\n| app.config       | Authorizes full access for deploying CDN configurations, retrieving deployment information and log data, and managing environment variables. |\n| app.accounts     | Authorizes full access to manage organizations, properties, environments, organization's members, and your partner account's members.        |\n| app.waf          | Authorizes full access to security apps, access rules, rate rules, custom rules, and managed rules.                                          |\n| app.bot_security | Authorizes full access to Bot Manager.                                                                                                       |\n| app.api_security | Authorizes full access to API Security.                                                                                                      |\n\n## Access Tokens \n\nEach request to a REST API service must be authorized by passing an access token to the `Authorization` request header. Access tokens provide temporary authorization (e.g., 1 minute) to our REST API service. The duration of this authorization is determined by the API client's **Access Token Lifetime (Seconds)** option. Once an access token expires, it may no longer be used to authorize requests. Attempting to authorize a request with an expired token will result in a `401 Unauthenticated Access` response.\n\nRequesting an access token requires:\n\n-   Submitting a `POST` request to the following URL:\n\n    `https://id.edgio.app/connect/token`\n\n-   A `Content-Type` header set to `application/x-www-form-urlencoded`.\n-   A request body that contains the following four parameters:\n\n    ```\n    client_id=<CLIENT ID>&client_secret=<SECRET>&grant_type=client_credentials&scope=<SCOPES>\n    ```\n\n    | Parameter     | Description                                                                                                                                                          |\n    | ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | client_id     | Replace `<CLIENT ID>` with the [system-defined ID assigned to your REST API client](https://docs.edg.io/applications/rest_api/authentication#copy-client-id-secret). |\n    | client_secret | Replace `<SECRET>` with the [secret assigned to your REST API client](https://docs.edg.io/applications/rest_api/authentication#copy-client-id-secret).               |\n    | grant_type    | Set this parameter to `client_credentials`.                                                                                                                          |\n    | scope         | Replace `<SCOPES>` with one or more [scopes](#section/Scopes). Use the plus symbol (+) to delimit each scope.                                                        |\n\n**Sample access token request:**\n\n``` curl\ncurl --request POST \\\n  --url https://id.edgio.app/connect/token \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --data 'client_id=J23d...B2Cd&client_secret=Fdad...DF3v&grant_type=client_credentials&scope=app.waf'\n```\n\n**Sample response:**\n\n```\n{\n    \"access_token\": \"A1bcbGciImtpZCI6Ij13N1VGQ01z...17cRRKYQ\",\n    \"expires_in\": 300,\n    \"token_type\": \"Bearer\",\n    \"scope\": \"app.waf\"\n}\n```\n\n### Authorizing Requests\n\nPass an access token through the `Authorization` header when requesting the desired API operation.\n\n**Sample API request:**\n\n```\ncurl --request GET \\\n     --url https://edgioapis.com/waf/v0.9/12345678-1234-1234-1234-1234567890ab/scopes \\\n     --header 'Authorization: Bearer  A1bcbGciImtpZCI6Ij13N1VGQ01z...17cRRKYQ'\n```\n\n## HTTP Methods\n\nHTTP method is a critical component of a request to our REST API service as it determines the type of action being requested.\n\n-   **DELETE:** Deletes a resource (e.g., custom rule or managed rule configuration).\n-   **GET:** Retrieves all or a specific resource.\n-   **PATCH:** Partially updates a resource (e.g., environment).\n-   **POST:** Creates a resource (e.g., custom rule or managed rule configuration).\n-   **PUT:** Updates a resource (e.g., custom rule or managed rule configuration).\n\nOur REST API service may return a `405 Method Not Allowed` response for requests submitted with an unsupported HTTP method.\n  \n## Request URL\n\nThe base URL for our REST API follows this basic pattern:\n\n`https://edgioapis.com/<SERVICE>/<VERSION>/`\n\n-   `<SERVICE>`**:** Identifies the REST API web service (e.g., cache, waf, and bot-security) designed to manage requests for a specific set of resources.\n-   `<VERSION>`**:** Identifies the version of the REST API service that will be called.\n\n**Sample Request URL:** \n\n```\nhttps://edgioapis.com/cache/v0.1/purge-requests\n```\n\n## Request Headers\n\nRequest headers provide information about your request to a REST API service. This information allows our server to authenticate your request and provides information that allows it to receive and translate the request body.\n\n**Key information:**\n-   The use of a Byte Order Mark (BOM) in a request to the REST API is not supported. Some user agents are configured to automatically include a BOM. Please either configure the user agent to exclude the BOM or use a different user agent.\n-   Request header values are case-insensitive.\n\n| Request Header | Description                                                                                                                                                                                                         |\n| -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Authorization  | Authorize requests through the `Authorization` request header. <a href=\"https://docs.edg.io/applications/rest_api/authentication#authorizing-requests\" target=\"_blank\">Learn more about authorization.</a>                                                       |\n| Accept         | This header should indicate the format in which the response will be returned. If you pass this header, set it to: `application/json`.                                                                |\n| Content-Type   | This header should indicate the format of the request body. If you pass this header, set it to: `application/json`. <br />You may omit this header when an endpoint does not have request properties. |\n| Host           | This header, which is set by the user agent, indicates the host name corresponding to the requested endpoint (i.e., edgioapis.com or id.edgio.app).                                                                               |\n| Content-Length | This header, which is set by the user agent, indicates the number of bytes contained in the request body.                                                                                                           |\n\n## Request Body\n\n`POST`, `PUT`, and `PATCH` requests typically require request body properties that describe the action that will take place. These request body properties are case-sensitive.\n\n## Response Headers\n\nResponse headers provide information about the response to your request to the REST API service. A brief description is provided for the response headers that are returned by most endpoints. Standard HTTP response headers are typically returned along with these common response headers.\n\n| Response Header | Description                                                                          |\n| --------------- | ------------------------------------------------------------------------------------ |\n| Cache-Control   | Indicates the cache-control policy for the response body.                            |\n| Content-Length  | Indicates the number of bytes in the response body.                                  |\n| Content-Type    | Indicates the format of the response body (e.g., `application/json; charset=utf-8`). |\n| I_am            | This header is reserved for internal use.                                            |\n| Date            | Identifies the date and time (UTC) at which your request was processed.              |\n\n## Rate Limit\n\nThe rate limit for our APIs varies by service and HTTP method. \n\n| Service      | HTTP Method                  | Rate Limit                                                |\n| ------------ | ---------------------------- | --------------------------------------------------------- |\n| cache        | ALL                          | 2,000 requests per 5 minutes                              |\n| config       | GET                          | 2,000 requests per 5 minutes                              |\n| config       | POST, PUT, PATCH, and DELETE | 600 requests per 5 minutes                                |\n| accounts     | GET                          | 2,000 requests per 5 minutes                              |\n| accounts     | POST, PUT, PATCH, and DELETE | 600 requests per 5 minutes                                |\n| waf          | ALL                          | 300 requests per hour <br /><br /> 1,000 requests per day |\n| bot-security | ALL                          | 300 requests per hour <br /><br /> 1,000 requests per day |\n| api-security | ALL                          | 300 requests per hour <br /><br /> 1,000 requests per day |\n\nOur API service returns a `429 Too Many Requests` response when a client exceeds one of the above rate limits."
  },
  "tags": [
    {
      "name": "members",
      "x-displayName": "Members",
      "description": "\nAutomate member management. One set of endpoints allows you to manage members for any organization associated with your partner account. Another set of endpoints allow you to manage the members associated with your partner account.\n"
    },
    {
      "name": "partners",
      "x-displayName": "Partner Account",
      "description": "\nAutomate the management of your partner account.\n"
    }
  ],
  "paths": {
    "/accounts/v0.1/members/{member_id}": {
      "servers": [
        {
          "url": "https://edgioapis.com"
        }
      ],
      "delete": {
        "summary": "Delete Member",
        "description": "Deletes a member.",
        "parameters": [
          {
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Member"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "deleteAccountsV01MembersMemberId"
      },
      "patch": {
        "summary": "Update Member",
        "description": "Updates a member.",
        "parameters": [
          {
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchAccountsV01MembersMemberId"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Member"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "patchAccountsV01MembersMemberId"
      },
      "get": {
        "summary": "Get Member",
        "description": "Retrieves information about a member.",
        "parameters": [
          {
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Member"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "getAccountsV01MembersMemberId"
      }
    },
    "/accounts/v0.1/members": {
      "servers": [
        {
          "url": "https://edgioapis.com"
        }
      ],
      "post": {
        "summary": "Add Member",
        "description": "Creates a member.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postAccountsV01Members"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Member"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "postAccountsV01Members"
      },
      "get": {
        "summary": "Get All Members",
        "description": "Returns all members.",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "0-based page number.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of results per page. Valid values are: 1 - 100. **Default value:** 20",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "organization_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Member_Collection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "getAccountsV01Members"
      }
    },
    "/accounts/v0.1/partners/{partner_id}/members/{member_id}": {
      "servers": [
        {
          "url": "https://edgioapis.com"
        }
      ],
      "delete": {
        "summary": "Delete Partner Member",
        "description": "Deletes a partner's member.",
        "parameters": [
          {
            "in": "path",
            "name": "partner_id",
            "description": "The partner's system-defined ID.\n\nFrom the Edgio Console, navigate to the desired partner and then click **Settings**. It is listed under **Partner ID**.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Partner_Member"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "deleteAccountsV01PartnersPartnerIdMembersMemberId"
      },
      "patch": {
        "summary": "Update Partner Member",
        "description": "Updates a partner's member.",
        "parameters": [
          {
            "in": "path",
            "name": "partner_id",
            "description": "The partner's system-defined ID.\n\nFrom the Edgio Console, navigate to the desired partner and then click **Settings**. It is listed under **Partner ID**.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchAccountsV01PartnersPartnerIdMembersMemberId"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Partner_Member"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "patchAccountsV01PartnersPartnerIdMembersMemberId"
      },
      "get": {
        "summary": "Get Partner Member",
        "description": "Retrieves information about a partner's member.",
        "parameters": [
          {
            "in": "path",
            "name": "partner_id",
            "description": "The partner's system-defined ID.\n\nFrom the Edgio Console, navigate to the desired partner and then click **Settings**. It is listed under **Partner ID**.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Partner_Member"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "getAccountsV01PartnersPartnerIdMembersMemberId"
      }
    },
    "/accounts/v0.1/partners/{partner_id}/members": {
      "servers": [
        {
          "url": "https://edgioapis.com"
        }
      ],
      "post": {
        "summary": "Add Partner Member",
        "description": "Creates a partner's member.",
        "parameters": [
          {
            "in": "path",
            "name": "partner_id",
            "description": "The partner's system-defined ID.\n\nFrom the Edgio Console, navigate to the desired partner and then click **Settings**. It is listed under **Partner ID**.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postAccountsV01PartnersPartnerIdMembers"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Partner_Member"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "postAccountsV01PartnersPartnerIdMembers"
      },
      "get": {
        "summary": "Get All Partner Members",
        "description": "Returns all partner's members.",
        "parameters": [
          {
            "in": "path",
            "name": "partner_id",
            "description": "The partner's system-defined ID.\n\nFrom the Edgio Console, navigate to the desired partner and then click **Settings**. It is listed under **Partner ID**.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "0-based page number.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of results per page. Valid values are: 1 - 100. **Default value:** 20",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Partner_Member_Collection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "getAccountsV01PartnersPartnerIdMembers"
      }
    },
    "/accounts/v0.1/partners/{partner_id}/logo-dark": {
      "servers": [
        {
          "url": "https://edgioapis.com"
        }
      ],
      "put": {
        "summary": "Update Partner's dark themed logo",
        "description": "Updates a partner's dark themed logo.",
        "parameters": [
          {
            "in": "path",
            "name": "partner_id",
            "description": "The partner's system-defined ID.\n\nFrom the Edgio Console, navigate to the desired partner and then click **Settings**. It is listed under **Partner ID**.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "multipart/form-data",
            "name": "logo",
            "description": "The partner's logo.",
            "required": true,
            "schema": {
              "type": "BaseApi_Types_UploadedFile"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Partner"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "partners"
        ],
        "operationId": "putAccountsV01PartnersPartnerIdLogoDark"
      }
    },
    "/accounts/v0.1/partners/{partner_id}/logo": {
      "servers": [
        {
          "url": "https://edgioapis.com"
        }
      ],
      "put": {
        "summary": "Update Partner logo",
        "description": "Updates a partner's logo.",
        "parameters": [
          {
            "in": "path",
            "name": "partner_id",
            "description": "The partner's system-defined ID.\n\nFrom the Edgio Console, navigate to the desired partner and then click **Settings**. It is listed under **Partner ID**.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "multipart/form-data",
            "name": "logo",
            "description": "The partner's logo.",
            "required": true,
            "schema": {
              "type": "BaseApi_Types_UploadedFile"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Partner"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "partners"
        ],
        "operationId": "putAccountsV01PartnersPartnerIdLogo"
      }
    },
    "/accounts/v0.1/partners/{partner_id}": {
      "servers": [
        {
          "url": "https://edgioapis.com"
        }
      ],
      "put": {
        "summary": "Update Partner",
        "description": "Updates a partner.",
        "parameters": [
          {
            "in": "path",
            "name": "partner_id",
            "description": "The partner's system-defined ID.\n\nFrom the Edgio Console, navigate to the desired partner and then click **Settings**. It is listed under **Partner ID**.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/putAccountsV01PartnersPartnerId"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Partner"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "partners"
        ],
        "operationId": "putAccountsV01PartnersPartnerId"
      },
      "get": {
        "summary": "Get Partner",
        "description": "Retrieves information about a partner.",
        "parameters": [
          {
            "in": "path",
            "name": "partner_id",
            "description": "The partner's system-defined ID.\n\nFrom the Edgio Console, navigate to the desired partner and then click **Settings**. It is listed under **Partner ID**.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Accounts_V1_Entities_Partner"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UserError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_RecordNotFoundError"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApi_Entities_Error_ServerError"
                }
              }
            }
          }
        },
        "tags": [
          "partners"
        ],
        "operationId": "getAccountsV01PartnersPartnerId"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "cacheScope": {
        "type": "oauth2",
        "description": "Learn how to [generate and pass a token.](#section/Access-Tokens)",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://id.edgio.app/connect/token",
            "scopes": {
              "app.cache": "Authorizes full access for purging cached content and retrieve purge status information."
            }
          }
        }
      },
      "configScope": {
        "type": "oauth2",
        "description": "Learn how to [generate and pass a token.](#section/Access-Tokens)",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://id.edgio.app/connect/token",
            "scopes": {
              "app.config": "Authorizes full access for deploying CDN configurations, retrieving deployment information and log data, and managing environment variables."
            }
          }
        }
      },
      "accountsScope": {
        "type": "oauth2",
        "description": "Learn how to [generate and pass a token.](#section/Access-Tokens)",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://id.edgio.app/connect/token",
            "scopes": {
              "app.accounts": "Authorizes full access to manage organizations, properties, environments, and members."
            }
          }
        }
      },
      "wafScope": {
        "type": "oauth2",
        "description": "Learn how to [generate and pass a token.](#section/Access-Tokens)",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://id.edgio.app/connect/token",
            "scopes": {
              "app.waf": "Authorizes full access to security apps, access rules, rate rules, custom rules, and managed rules."
            }
          }
        }
      },
      "api_securityScope": {
        "type": "oauth2",
        "description": "Learn how to [generate and pass a token.](#section/Access-Tokens)",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://id.edgio.app/connect/token",
            "scopes": {
              "app.api_security": "Authorizes full access to API Security."
            }
          }
        }
      },
      "bot_securityScope": {
        "type": "oauth2",
        "description": "Learn how to [generate and pass a token.](#section/Access-Tokens)",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://id.edgio.app/connect/token",
            "scopes": {
              "app.bot_security": "Authorizes full access to Bot Manager."
            }
          }
        }
      },
      "client_wafScope": {
        "type": "oauth2",
        "description": "Learn how to [generate and pass a token.](#section/Access-Tokens)",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://id.edgio.app/connect/token",
            "scopes": {
              "app.client_waf": "Authorizes full access to Client-Side Protection."
            }
          }
        }
      },
      "metricsScope": {
        "type": "oauth2",
        "description": "Learn how to [generate and pass a token.](#section/Access-Tokens)",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://id.edgio.app/connect/token",
            "scopes": {
              "app.metrics": "Authorizes full access to the Metrics API."
            }
          }
        }
      },
      "rtsAlertsScope": {
        "type": "oauth2",
        "description": "Learn how to [generate and pass a token.](#section/Access-Tokens)",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://id.edgio.app/connect/token",
            "scopes": {
              "app.real_time_stats.alerts": "Authorizes full access to real-time alerts."
            }
          }
        }
      },
      "rtldScope": {
        "type": "oauth2",
        "description": "Learn how to [generate and pass a token.](#section/Access-Tokens)",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://id.edgio.app/connect/token",
            "scopes": {
              "app.rtld": "Authorizes full access to Real-Time Log Delivery."
            }
          }
        }
      }
    },
    "schemas": {
      "Accounts_V1_Entities_EnvironmentRole": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "The resource's type."
          },
          "@id": {
            "type": "string",
            "description": "The resource's relative path."
          },
          "@links": {
            "type": "object",
            "description": "Links to related resources."
          },
          "id": {
            "type": "string"
          },
          "environment_id": {
            "type": "string",
            "description": "Environment ID"
          },
          "role": {
            "type": "string",
            "description": "The user's role."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The user's creation date and time (UTC)."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The user's last modification date and time (UTC)."
          }
        },
        "required": [
          "@type",
          "@id",
          "id"
        ]
      },
      "Accounts_V1_Entities_PropertyRole": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "The resource's type."
          },
          "@id": {
            "type": "string",
            "description": "The resource's relative path."
          },
          "@links": {
            "type": "object",
            "description": "Links to related resources."
          },
          "id": {
            "type": "string"
          },
          "property_id": {
            "type": "string",
            "description": "Property ID"
          },
          "role": {
            "type": "string",
            "description": "The user's role."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The user's creation date and time (UTC)."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The user's last modification date and time (UTC)."
          }
        },
        "required": [
          "@type",
          "@id",
          "id"
        ]
      },
      "Accounts_V1_Entities_Member": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "The resource's type."
          },
          "@id": {
            "type": "string",
            "description": "The resource's relative path."
          },
          "@links": {
            "type": "object",
            "description": "Links to related resources."
          },
          "id": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The user's role."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The user's creation date and time (UTC)."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The user's last modification date and time (UTC)."
          },
          "user_email": {
            "type": "string",
            "description": "The user's email."
          },
          "environment_roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Accounts_V1_Entities_EnvironmentRole"
            },
            "description": "List of environment roles."
          },
          "property_roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Accounts_V1_Entities_PropertyRole"
            },
            "description": "List of property roles."
          }
        },
        "required": [
          "@type",
          "@id",
          "id"
        ],
        "description": "Accounts_V1_Entities_Member model"
      },
      "BaseApi_Entities_BaseHyperionErrorDetail": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "example": "ErrorDetail",
            "description": "The error detail type."
          },
          "description": {
            "type": "string",
            "description": "Detail description about the error."
          },
          "@links": {
            "type": "object",
            "description": "Links to related resources."
          },
          "source": {
            "type": "string",
            "description": "JSON Pointer"
          }
        },
        "required": [
          "@type",
          "description"
        ]
      },
      "BaseApi_Entities_Error_UserError": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "example": "Error",
            "description": "The error type."
          },
          "code": {
            "type": "string",
            "enum": [
              "invalid_input"
            ],
            "description": "A human readable error code following `snake_case`."
          },
          "title": {
            "type": "string",
            "enum": [
              "Bad request"
            ],
            "description": "The main error heading."
          },
          "description": {
            "type": "string",
            "example": [
              "Request has one or more errors and cannot be processed"
            ],
            "description": "Detailed description about the error."
          },
          "status_code": {
            "type": "integer",
            "format": "int32",
            "enum": [
              400
            ],
            "description": "Represents the HTTP status code associated with the response."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseApi_Entities_BaseHyperionErrorDetail"
            },
            "description": "Describes the error."
          }
        },
        "required": [
          "@type",
          "title"
        ],
        "description": "BaseApi_Entities_Error_UserError model"
      },
      "BaseApi_Entities_Error_UnauthorizedError": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "example": "Error",
            "description": "The error type."
          },
          "code": {
            "type": "string",
            "enum": [
              "unauthorized"
            ],
            "description": "A human readable error code following `snake_case`."
          },
          "title": {
            "type": "string",
            "enum": [
              "Unauthorized"
            ],
            "description": "The main error heading."
          },
          "description": {
            "type": "string",
            "example": [
              "Request did not include a required authentication component"
            ],
            "description": "Detailed description about the error."
          },
          "status_code": {
            "type": "integer",
            "format": "int32",
            "enum": [
              401
            ],
            "description": "Represents the HTTP status code associated with the response."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseApi_Entities_BaseHyperionErrorDetail"
            },
            "description": "Describes the error."
          }
        },
        "required": [
          "@type",
          "title"
        ],
        "description": "BaseApi_Entities_Error_UnauthorizedError model"
      },
      "BaseApi_Entities_Error_ForbiddenError": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "example": "Error",
            "description": "The error type."
          },
          "code": {
            "type": "string",
            "enum": [
              "forbidden"
            ],
            "description": "A human readable error code following `snake_case`."
          },
          "title": {
            "type": "string",
            "enum": [
              "Forbidden"
            ],
            "description": "The main error heading."
          },
          "description": {
            "type": "string",
            "example": [
              "Request has failed authorization checks"
            ],
            "description": "Detailed description about the error."
          },
          "status_code": {
            "type": "integer",
            "format": "int32",
            "enum": [
              403
            ],
            "description": "Represents the HTTP status code associated with the response."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseApi_Entities_BaseHyperionErrorDetail"
            },
            "description": "Describes the error."
          }
        },
        "required": [
          "@type",
          "title"
        ],
        "description": "BaseApi_Entities_Error_ForbiddenError model"
      },
      "BaseApi_Entities_Error_RecordNotFoundError": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "example": "Error",
            "description": "The error type."
          },
          "code": {
            "type": "string",
            "enum": [
              "not_found"
            ],
            "description": "A human readable error code following `snake_case`."
          },
          "title": {
            "type": "string",
            "enum": [
              "Not found"
            ],
            "description": "The main error heading."
          },
          "description": {
            "type": "string",
            "example": [
              "Resource not found"
            ],
            "description": "Detailed description about the error."
          },
          "status_code": {
            "type": "integer",
            "format": "int32",
            "enum": [
              404
            ],
            "description": "Represents the HTTP status code associated with the response."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseApi_Entities_BaseHyperionErrorDetail"
            },
            "description": "Describes the error."
          }
        },
        "required": [
          "@type",
          "title"
        ],
        "description": "BaseApi_Entities_Error_RecordNotFoundError model"
      },
      "BaseApi_Entities_Error_TooManyRequestsError": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "example": "Error",
            "description": "The error type."
          },
          "code": {
            "type": "string",
            "enum": [
              "rate_limit_reached"
            ],
            "description": "A human readable error code following `snake_case`."
          },
          "title": {
            "type": "string",
            "enum": [
              "Too many requests"
            ],
            "description": "The main error heading."
          },
          "description": {
            "type": "string",
            "example": [
              "Too many requests have been received in a given amount of time"
            ],
            "description": "Detailed description about the error."
          },
          "status_code": {
            "type": "integer",
            "format": "int32",
            "enum": [
              429
            ],
            "description": "Represents the HTTP status code associated with the response."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseApi_Entities_BaseHyperionErrorDetail"
            },
            "description": "Describes the error."
          }
        },
        "required": [
          "@type",
          "title"
        ],
        "description": "BaseApi_Entities_Error_TooManyRequestsError model"
      },
      "BaseApi_Entities_Error_ServerError": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "example": "Error",
            "description": "The error type."
          },
          "code": {
            "type": "string",
            "enum": [
              "internal_error"
            ],
            "description": "A human readable error code following `snake_case`."
          },
          "title": {
            "type": "string",
            "enum": [
              "Internal server error"
            ],
            "description": "The main error heading."
          },
          "description": {
            "type": "string",
            "example": [
              "Something went wrong. Please try again later and contact support if the problem persists."
            ],
            "description": "Detailed description about the error."
          },
          "status_code": {
            "type": "integer",
            "format": "int32",
            "enum": [
              500
            ],
            "description": "Represents the HTTP status code associated with the response."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseApi_Entities_BaseHyperionErrorDetail"
            },
            "description": "Describes the error."
          }
        },
        "required": [
          "@type",
          "title"
        ],
        "description": "BaseApi_Entities_Error_ServerError model"
      },
      "patchAccountsV01MembersMemberId": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "viewer",
              "purger",
              "security_auditor",
              "security_manager",
              "editor",
              "maintainer",
              "admin"
            ]
          },
          "property_roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "User property role",
                  "enum": [
                    "viewer",
                    "purger",
                    "editor",
                    "maintainer"
                  ]
                },
                "property_id": {
                  "type": "string",
                  "description": "Property ID (uuid)"
                }
              },
              "required": [
                "role",
                "property_id"
              ]
            }
          },
          "environment_roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "User environment role",
                  "enum": [
                    "viewer",
                    "purger",
                    "editor",
                    "maintainer"
                  ]
                },
                "environment_id": {
                  "type": "string",
                  "description": "Environment ID (uuid)"
                }
              },
              "required": [
                "role",
                "environment_id"
              ]
            }
          }
        },
        "description": "Updates a member."
      },
      "BaseApi_Entities_HyperionLink": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "base_path": {
            "type": "string"
          }
        }
      },
      "BaseApi_Entities_HyperionNavigationLinks": {
        "type": "object",
        "properties": {
          "first": {
            "$ref": "#/components/schemas/BaseApi_Entities_HyperionLink"
          },
          "next": {
            "$ref": "#/components/schemas/BaseApi_Entities_HyperionLink"
          },
          "previous": {
            "$ref": "#/components/schemas/BaseApi_Entities_HyperionLink"
          },
          "last": {
            "$ref": "#/components/schemas/BaseApi_Entities_HyperionLink"
          }
        }
      },
      "Accounts_V1_Entities_Member_Collection": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "The resource's type."
          },
          "@id": {
            "type": "string",
            "description": "The resource's relative path."
          },
          "@links": {
            "$ref": "#/components/schemas/BaseApi_Entities_HyperionNavigationLinks"
          },
          "total_items": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of items."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Accounts_V1_Entities_Member"
            },
            "description": "List of users."
          }
        },
        "required": [
          "@type",
          "@id"
        ],
        "description": "Accounts_V1_Entities_Member_Collection model"
      },
      "postAccountsV01Members": {
        "type": "object",
        "properties": {
          "user_email": {
            "type": "string"
          },
          "organization_id": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "viewer",
              "purger",
              "security_auditor",
              "security_manager",
              "editor",
              "maintainer",
              "admin"
            ]
          },
          "property_roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "User property role",
                  "enum": [
                    "viewer",
                    "purger",
                    "editor",
                    "maintainer"
                  ]
                },
                "property_id": {
                  "type": "string",
                  "description": "Property ID (uuid)"
                }
              },
              "required": [
                "role",
                "property_id"
              ]
            }
          },
          "environment_roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "User environment role",
                  "enum": [
                    "viewer",
                    "purger",
                    "editor",
                    "maintainer"
                  ]
                },
                "environment_id": {
                  "type": "string",
                  "description": "Environment ID (uuid)"
                }
              },
              "required": [
                "role",
                "environment_id"
              ]
            }
          }
        },
        "required": [
          "user_email",
          "organization_id"
        ],
        "description": "Creates a member."
      },
      "Accounts_V1_Entities_Partner_Member": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "The resource's type."
          },
          "@id": {
            "type": "string",
            "description": "The resource's relative path."
          },
          "@links": {
            "type": "object",
            "description": "Links to related resources."
          },
          "id": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "description": "The user's role."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The user's creation date and time (UTC)."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The user's last modification date and time (UTC)."
          },
          "user_email": {
            "type": "string",
            "description": "The user's email."
          }
        },
        "required": [
          "@type",
          "@id",
          "id"
        ],
        "description": "Accounts_V1_Entities_Partner_Member model"
      },
      "patchAccountsV01PartnersPartnerIdMembersMemberId": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "viewer",
              "maintainer",
              "admin"
            ]
          }
        },
        "description": "Updates a partner's member."
      },
      "Accounts_V1_Entities_Partner_Member_Collection": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "The resource's type."
          },
          "@id": {
            "type": "string",
            "description": "The resource's relative path."
          },
          "@links": {
            "$ref": "#/components/schemas/BaseApi_Entities_HyperionNavigationLinks"
          },
          "total_items": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of items."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Accounts_V1_Entities_Partner_Member"
            },
            "description": "List of users."
          }
        },
        "required": [
          "@type",
          "@id"
        ],
        "description": "Accounts_V1_Entities_Partner_Member_Collection model"
      },
      "postAccountsV01PartnersPartnerIdMembers": {
        "type": "object",
        "properties": {
          "user_email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "viewer",
              "maintainer",
              "admin"
            ]
          }
        },
        "required": [
          "user_email"
        ],
        "description": "Creates a partner's member."
      },
      "Accounts_V1_Entities_Partner": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "The resource's type."
          },
          "@id": {
            "type": "string",
            "description": "The resource's relative path."
          },
          "@links": {
            "type": "object",
            "description": "Links to related resources."
          },
          "id": {
            "type": "string",
            "description": "The resource's system-defined ID."
          },
          "logo_url": {
            "type": "string",
            "description": "The partner's logo"
          },
          "logo_url_dark": {
            "type": "string",
            "description": "The partner's dark themed logo"
          },
          "name": {
            "type": "string",
            "description": "The partner's name"
          },
          "support_info": {
            "type": "string",
            "description": "The partner's support info"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The partner's creation date and time (UTC)."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The partner's last modification date and time (UTC)."
          }
        },
        "required": [
          "@type",
          "@id",
          "id"
        ],
        "description": "Accounts_V1_Entities_Partner model"
      },
      "putAccountsV01PartnersPartnerId": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The partner's name."
          },
          "support_info": {
            "type": "string",
            "description": "The partner's support info."
          }
        },
        "required": [
          "name"
        ],
        "description": "Updates a partner."
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Members",
      "tags": [
        "members"
      ]
    },
    {
      "name": "Partner Account",
      "tags": [
        "partners"
      ]
    }
  ]
}