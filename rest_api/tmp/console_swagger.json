{
  "info": {
    "title": "Edgio Edgio APIs",
    "description": "API spec for Edgio APIs",
    "termsOfService": "https://edg.io/legal/terms-of-service/",
    "contact": {
      "name": "info@edg.io",
      "email": "info@edg.io",
      "url": "https://edg.io/contact-support/"
    },
    "version": "1.0.0-beta"
  },
  "swagger": "2.0",
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "configScope": {
      "type": "oauth2",
      "authorizationUrl": "http://swagger.io/api/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "app.config": "app.config"
      }
    },
    "cacheScope": {
      "type": "oauth2",
      "authorizationUrl": "http://swagger.io/api/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "app.cache.purge": "app.cache.purge"
      }
    },
    "accountsScope": {
      "type": "oauth2",
      "authorizationUrl": "http://swagger.io/api/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "app.accounts": "app.accounts"
      }
    }
  },
  "host": "edgioapis.com",
  "basePath": "/",
  "tags": [
    {
      "name": "members",
      "description": "Operations about members"
    },
    {
      "name": "environments",
      "description": "Operations about environments"
    },
    {
      "name": "properties",
      "description": "Operations about properties"
    },
    {
      "name": "organizations",
      "description": "Operations about organizations"
    },
    {
      "name": "asm",
      "description": "Operations about asms"
    },
    {
      "name": "bff",
      "description": "Operations about bffs"
    },
    {
      "name": "purge-requests",
      "description": "Operations about purge-requests"
    },
    {
      "name": "environment-redirects",
      "description": "Operations about environment-redirects"
    },
    {
      "name": "environment-variables",
      "description": "Operations about environment-variables"
    },
    {
      "name": "tls-certs",
      "description": "Operations about tls-certs"
    },
    {
      "name": "deployments",
      "description": "Operations about deployments"
    },
    {
      "name": "configs",
      "description": "Operations about configs"
    }
  ],
  "paths": {
    "/accounts/v0.1/members/{member_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "member_id",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Member"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "deleteAccountsV01MembersMemberId"
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "member_id",
            "type": "string",
            "required": true
          },
          {
            "name": "patchAccountsV01MembersMemberId",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchAccountsV01MembersMemberId"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Member"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "patchAccountsV01MembersMemberId"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "member_id",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Member"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "getAccountsV01MembersMemberId"
      }
    },
    "/accounts/v0.1/members": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postAccountsV01Members",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postAccountsV01Members"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Member"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "postAccountsV01Members"
      },
      "get": {
        "summary": " members",
        "description": " members",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "0-based page number.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of results per page. Valid values are: 1 - 100. **Default value:** 20",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          },
          {
            "in": "query",
            "name": "organization_id",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Member_Collection"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "members"
        ],
        "operationId": "getAccountsV01Members"
      }
    },
    "/accounts/v0.1/environments/{environment_id}": {
      "delete": {
        "summary": "Delete Environment",
        "description": "Deletes an environment.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "description": "The environment's system-defined ID.\n\nRetrieve a list of environments and their system-defined IDs through the [Get All Environments operation](#tag/environments/operation/getAccountsV01Environments).\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Environment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "deleteAccountsV01EnvironmentsEnvironmentId"
      },
      "patch": {
        "summary": "Update Environment",
        "description": "Updates an environment.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "description": "The environment's system-defined ID.\n\nRetrieve a list of environments and their system-defined IDs through the [Get All Environments operation](#tag/environments/operation/getAccountsV01Environments).\n",
            "type": "string",
            "required": true
          },
          {
            "name": "patchAccountsV01EnvironmentsEnvironmentId",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchAccountsV01EnvironmentsEnvironmentId"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Environment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "patchAccountsV01EnvironmentsEnvironmentId"
      },
      "get": {
        "summary": "Get Environment",
        "description": "Retrieves an environment's settings and metadata.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "environment_id",
            "description": "The environment's system-defined ID.\n\nRetrieve a list of environments and their system-defined IDs through the [Get All Environments operation](#tag/environments/operation/getAccountsV01Environments).\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Environment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "getAccountsV01EnvironmentsEnvironmentId"
      }
    },
    "/accounts/v0.1/environments": {
      "post": {
        "summary": "Add Environment",
        "description": "Creates an environment.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postAccountsV01Environments",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postAccountsV01Environments"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Environment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "postAccountsV01Environments"
      },
      "get": {
        "summary": "Get All Environments",
        "description": "Returns all environments that belong to the specified property.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "0-based page number.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of results per page. Valid values are: 1 - 100. **Default value:** 20",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          },
          {
            "in": "query",
            "name": "property_id",
            "description": "The property's system-defined ID.",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Environment_Collection"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "getAccountsV01Environments"
      }
    },
    "/accounts/v0.1/properties/{property_id}": {
      "delete": {
        "summary": "Delete Property",
        "description": "Delete a property.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The property's system-defined ID.\n\nRetrieve a list of properties and their system-defined IDs through the [Get All Properties operation](#tag/properties/operation/getAccountsV01Properties).\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Property"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "properties"
        ],
        "operationId": "deleteAccountsV01PropertiesPropertyId"
      },
      "patch": {
        "summary": "Update Property",
        "description": "Update a property.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The property's system-defined ID.\n\nRetrieve a list of properties and their system-defined IDs through the [Get All Properties operation](#tag/properties/operation/getAccountsV01Properties).\n",
            "type": "string",
            "required": true
          },
          {
            "name": "patchAccountsV01PropertiesPropertyId",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchAccountsV01PropertiesPropertyId"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Property"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "properties"
        ],
        "operationId": "patchAccountsV01PropertiesPropertyId"
      },
      "get": {
        "summary": "Get Property",
        "description": "Retrieve a property.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The property's system-defined ID.\n\nRetrieve a list of properties and their system-defined IDs through the [Get All Properties operation](#tag/properties/operation/getAccountsV01Properties).\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Property"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "properties"
        ],
        "operationId": "getAccountsV01PropertiesPropertyId"
      }
    },
    "/accounts/v0.1/properties": {
      "post": {
        "summary": "Create Property",
        "description": "Create a property.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postAccountsV01Properties",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postAccountsV01Properties"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Property"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "properties"
        ],
        "operationId": "postAccountsV01Properties"
      },
      "get": {
        "summary": "Get All Properties",
        "description": "Returns all properties.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "0-based page number.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of results per page. Valid values are: 1 - 100. **Default value:** 20",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          },
          {
            "in": "query",
            "name": "organization_id",
            "description": "An organization's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired organization and then click **Settings**. It is listed under **Organization ID**.\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Property_Collection"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "properties"
        ],
        "operationId": "getAccountsV01Properties"
      }
    },
    "/accounts/v0.1/organizations/{organization_id}": {
      "delete": {
        "summary": "Delete Organization",
        "description": "Deletes an organization.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "description": "The organization's system-defined ID.\n\nFrom the Edgio Console, navigate to the desired organization and then click **Settings**. It is listed under **Organization ID**.\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Organization"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "organizations"
        ],
        "operationId": "deleteAccountsV01OrganizationsOrganizationId"
      },
      "patch": {
        "summary": "Update Organization",
        "description": "Updates an organization.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "description": "The organization's system-defined ID.\n\nFrom the Edgio Console, navigate to the desired organization and then click **Settings**. It is listed under **Organization ID**.\n",
            "type": "string",
            "required": true
          },
          {
            "name": "patchAccountsV01OrganizationsOrganizationId",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/patchAccountsV01OrganizationsOrganizationId"
            }
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Organization"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "organizations"
        ],
        "operationId": "patchAccountsV01OrganizationsOrganizationId"
      },
      "get": {
        "summary": "Get Organization",
        "description": "Retrieves information about an organization.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization_id",
            "description": "The organization's system-defined ID.\n\nFrom the Edgio Console, navigate to the desired organization and then click **Settings**. It is listed under **Organization ID**.\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "accountsScope": [
              "app.accounts"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Accounts_V1_Entities_Organization"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "organizations"
        ],
        "operationId": "getAccountsV01OrganizationsOrganizationId"
      }
    },
    "/asm/v0.1/proxies/filters": {
      "get": {
        "description": "Returns a list of filters that can be used to filter proxies.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of filters that can be used to filter proxies."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01ProxiesFilters"
      }
    },
    "/asm/v0.1/proxies/stats": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "get Stat(s)"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01ProxiesStats"
      }
    },
    "/asm/v0.1/proxies": {
      "get": {
        "description": "Returns a list of Proxies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "sort_field",
            "description": "The field to sort by",
            "type": "string",
            "default": "created_at",
            "enum": [
              "created_at",
              "name",
              "proxy"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "The direction to sort by",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "items",
            "description": "Number of items to return per page. Maximum value: 100",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Proxies"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01Proxies"
      }
    },
    "/asm/v0.1/criterion-types": {
      "get": {
        "description": "Gets all criterion types with their associated operators.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets all criterion types with their associated operators."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01CriterionTypes"
      }
    },
    "/asm/v0.1/context": {
      "get": {
        "description": "Gets all available ASM permissions for the current user.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets all available ASM permissions for the current user."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01Context"
      }
    },
    "/asm/v0.1/cwes/{id}": {
      "get": {
        "description": "Gets a CWE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a CWE"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01CwesId"
      }
    },
    "/asm/v0.1/cwes": {
      "get": {
        "description": "Gets all CWEs in our database",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sort_field",
            "description": "The field to sort by",
            "type": "string",
            "default": "created_at",
            "enum": [
              "created_at",
              "updated_at",
              "external_id"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "The direction to sort by",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Gets all CWEs in our database"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01Cwes"
      }
    },
    "/asm/v0.1/cves/{id}": {
      "get": {
        "description": "Gets a CVE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a CVE"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01CvesId"
      }
    },
    "/asm/v0.1/cves/filters": {
      "get": {
        "description": "Returns a list of filters that can be used to filter assets.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of filters that can be used to filter assets."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01CvesFilters"
      }
    },
    "/asm/v0.1/cves": {
      "get": {
        "description": "Gets all CVEs in our database",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "sort_field",
            "description": "The field to sort by",
            "type": "string",
            "default": "created_at",
            "enum": [
              "created_at",
              "updated_at",
              "summary",
              "assets",
              "technologies",
              "external_id",
              "external_published_at",
              "external_modified_at",
              "severity",
              "impact",
              "exploitability",
              "first_seen",
              "last_seen",
              "exposures"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "The direction to sort by",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "items",
            "description": "Number of items to return per page. Maximum value: 100",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Gets all CVEs in our database"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01Cves"
      }
    },
    "/asm/v0.1/cpe-matches/{id}": {
      "get": {
        "description": "Gets a CPE Match by ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a CPE Match by ID"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01CpeMatchesId"
      }
    },
    "/asm/v0.1/cpe-matches": {
      "get": {
        "description": "Gets all CPE Matches in our database",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cpe",
            "description": "Returns CPE Matches that match the given CPE",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "sort_field",
            "description": "The field to sort by",
            "type": "string",
            "default": "created_at",
            "enum": [
              "created_at",
              "updated_at",
              "part",
              "vendor",
              "product",
              "version",
              "version_major",
              "version_minor",
              "version_patch"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "The direction to sort by",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Gets all CPE Matches in our database"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01CpeMatches"
      }
    },
    "/asm/v0.1/cpes/{id}": {
      "get": {
        "description": "Gets a CPE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a CPE"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01CpesId"
      }
    },
    "/asm/v0.1/cpes": {
      "get": {
        "description": "Gets all CPEs in our database",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cpe",
            "description": "The whole CPE name to search for",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "part",
            "description": "The part of the CPE",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "vendor",
            "description": "The vendor of the CPE",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "product",
            "description": "The product of the CPE",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "version",
            "description": "The version of the CPE",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "version_major",
            "description": "The major version of the CPE",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "version_minor",
            "description": "The minor version of the CPE",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "version_patch",
            "description": "The patch version of the CPE",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "sort_field",
            "description": "The field to sort by",
            "type": "string",
            "default": "created_at",
            "enum": [
              "created_at",
              "updated_at",
              "part",
              "vendor",
              "product",
              "version",
              "version_major",
              "version_minor",
              "version_patch"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "The direction to sort by",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Gets all CPEs in our database"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01Cpes"
      }
    },
    "/asm/v0.1/rules/{id}": {
      "patch": {
        "description": "Updates a rule.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "collection_filter_type",
            "description": "The type of collection filter",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "match_all",
            "description": "Whether all criteria must match",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "enabled",
            "description": "Whether the rule is enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "action_type",
            "description": "The action to take on rule match",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "severity_action_type",
            "description": "The severity action to take on rule match",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "exposure_severity",
            "description": "The severity of the exposure",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "exposure_summary",
            "description": "A summary of the exposure",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "rule_description",
            "description": "A description of the rule",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "collections",
            "description": "The collections to apply the rule to",
            "type": "array",
            "items": {
              "type": "object"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "rule_criteria",
            "description": "The rule criteria to apply the rule to",
            "type": "array",
            "items": {
              "type": "object"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "asset_filter_type",
            "description": "The type of asset filter",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "asset_criteria",
            "description": "The asset criteria to apply the rule to",
            "type": "array",
            "items": {
              "type": "object"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "priority",
            "description": "The priority of the rule",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "exit_on_match",
            "description": "Whether rule processing will exit upon match",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "assigned_to_id",
            "description": "The ID of the user the rule is assigned to",
            "type": "string",
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Updates a rule."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "patchAsmV01RulesId"
      },
      "delete": {
        "description": "Deletes a rule.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes a rule."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "deleteAsmV01RulesId"
      }
    },
    "/asm/v0.1/rules/reorder": {
      "patch": {
        "description": "Reorders rules",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "source_index",
            "description": "The current index of the rule",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "destination_index",
            "description": "The new index for the rule",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Reorders rules"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "patchAsmV01RulesReorder"
      }
    },
    "/asm/v0.1/rules/reset": {
      "delete": {
        "description": "Reset all rules in an organization.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Reset all rules in an organization."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "deleteAsmV01RulesReset"
      }
    },
    "/asm/v0.1/rules": {
      "post": {
        "description": "Create a rule.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "collection_filter_type",
            "description": "The type of collection filter",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "match_all",
            "description": "Whether all criteria must match",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "enabled",
            "description": "Whether the rule is enabled",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "action_type",
            "description": "The action to take on rule match",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "severity_action_type",
            "description": "The severity action to take on rule match",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "exposure_severity",
            "description": "The severity of the exposure",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "exposure_summary",
            "description": "A summary of the exposure",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "rule_description",
            "description": "A description of the rule",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "collections",
            "description": "The collections to apply the rule to",
            "type": "array",
            "items": {
              "type": "object"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "rule_criteria",
            "description": "The criteria to apply the rule to",
            "type": "array",
            "items": {
              "type": "object"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "asset_filter_type",
            "description": "The type of asset filter",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "asset_criteria",
            "description": "The criteria to apply the rule to",
            "type": "array",
            "items": {
              "type": "object"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "priority",
            "description": "The priority of the rule",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "exit_on_match",
            "description": "Whether rule processing will exit upon match",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "assigned_to_id",
            "description": "The ID of the user the rule is assigned to",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Create a rule."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "postAsmV01Rules"
      },
      "get": {
        "description": "Lists all rules in an organization.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Lists all rules in an organization."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01Rules"
      }
    },
    "/asm/v0.1/comments/{id}": {
      "delete": {
        "description": "Deletes a comment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes a comment"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "deleteAsmV01CommentsId"
      },
      "patch": {
        "description": "Updates a comment",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "value",
            "description": "The comment text",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Updates a comment"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "patchAsmV01CommentsId"
      },
      "get": {
        "description": "Gets a comment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a comment"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01CommentsId"
      }
    },
    "/asm/v0.1/comments": {
      "post": {
        "description": "Creates a comment for an exposure.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "exposure_id",
            "description": "The ID of the exposure",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "value",
            "description": "The comment text",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Creates a comment for an exposure."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "postAsmV01Comments"
      },
      "get": {
        "description": "Lists all comments for an exposure.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "exposure_id",
            "description": "The ID of the exposure",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "items",
            "description": "Number of items to return per page. Maximum value: 100",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Lists all comments for an exposure."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01Comments"
      }
    },
    "/asm/v0.1/dashboard/world-map": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get WorldMap(s)"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01DashboardWorldMap"
      }
    },
    "/asm/v0.1/dashboard/stats": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get Stat(s)"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01DashboardStats"
      }
    },
    "/asm/v0.1/technologies/categories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "get Category(s)"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01TechnologiesCategories"
      }
    },
    "/asm/v0.1/technologies/{id}": {
      "get": {
        "description": "Gets a technology",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a technology"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01TechnologiesId"
      }
    },
    "/asm/v0.1/technologies/filters": {
      "get": {
        "description": "Returns a list of filters that can be used to filter technology versions.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of filters that can be used to filter technology versions."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01TechnologiesFilters"
      }
    },
    "/asm/v0.1/technologies": {
      "get": {
        "description": "Get all matching technologies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "scan_id",
            "description": "If present, only technologies present in this scan will be returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "category_id",
            "description": "The category ID(s) to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "sort_field",
            "description": "The field to sort by",
            "type": "string",
            "default": "name",
            "enum": [
              "created_at",
              "updated_at",
              "name",
              "last_detected_at",
              "asset_count",
              "cve_counts"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "The direction to sort by",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "collection_id",
            "description": "The collection ID(s) to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "has_number",
            "description": "Show only technology versions that have a version number",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "name": "cve_severity",
            "description": "Returns only technology versions with at least one CVE of the specified severity",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "description": "The search term",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "items",
            "description": "Number of items to return per page. Maximum value: 100",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Get all matching technologies"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01Technologies"
      }
    },
    "/asm/v0.1/technology-versions/{id}": {
      "delete": {
        "description": "Deletes a technology version",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes a technology version"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "deleteAsmV01TechnologyVersionsId"
      },
      "get": {
        "description": "Gets a technology version",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a technology version"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01TechnologyVersionsId"
      }
    },
    "/asm/v0.1/technology-versions/filters": {
      "get": {
        "description": "Returns a list of filters that can be used to filter technology versions.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of filters that can be used to filter technology versions."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01TechnologyVersionsFilters"
      }
    },
    "/asm/v0.1/technology-versions": {
      "get": {
        "description": "Gets all matching technology versions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "scan_id",
            "description": "If present, only technologies present in this scan will be returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "category_id",
            "description": "The category ID(s) to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "sort_field",
            "description": "The field to sort by",
            "type": "string",
            "default": "name",
            "enum": [
              "created_at",
              "updated_at",
              "last_detected_at",
              "name",
              "asset_count",
              "cve_counts"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "The direction to sort by",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "created_by_scan_id",
            "description": "When present only technology versions created by this scan will be returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "found_by_scan_id",
            "description": "When present only technology versions found by this scan will be returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "collection_id",
            "description": "The collection ID(s) to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "has_number",
            "description": "Show only technology versions that have a version number",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "name": "cve_severity",
            "description": "Returns only technology versions with at least one CVE of the specified severity",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "description": "The search term",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "items",
            "description": "Number of items to return per page. Maximum value: 100",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Gets all matching technology versions"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01TechnologyVersions"
      }
    },
    "/asm/v0.1/exposures/{id}/scan-results": {
      "get": {
        "description": "Returns the scan results for an exposure.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "items",
            "description": "Number of items to return per page. Maximum value: 100",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the scan results for an exposure."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01ExposuresIdScanResults"
      }
    },
    "/asm/v0.1/exposures/{id}/watch": {
      "patch": {
        "description": "Watches/unwatches an exposure.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "watch",
            "description": "Set to true to watch the exposure, false to unwatch it",
            "type": "boolean",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Watches/unwatches an exposure."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "patchAsmV01ExposuresIdWatch"
      }
    },
    "/asm/v0.1/exposures/{id}": {
      "patch": {
        "description": "Updates an exposure.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "assigned_to_id",
            "description": "The ID of the user to which to assign the exposure",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "status",
            "description": "The status of the exposure",
            "type": "string",
            "enum": [
              "Open",
              "Acknowledged",
              "Muted",
              "Mitigated",
              "Ignored",
              "Resolved"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "priority",
            "description": "The priority of the exposure",
            "type": "string",
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "muted_until",
            "description": "The date to which to mute the exposure",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "formData",
            "name": "comment",
            "description": "A comment",
            "type": "string",
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Updates an exposure."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "patchAsmV01ExposuresId"
      },
      "get": {
        "description": "Gets an exposure.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets an exposure."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01ExposuresId"
      }
    },
    "/asm/v0.1/exposures/bulk-edit": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "organization_id",
            "description": "The id of the organization that owns the exposures",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "attributes[assigned_to_id]",
            "description": "The ID of the user to which to assign the exposure",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "attributes[status]",
            "description": "The status of the exposure",
            "type": "string",
            "enum": [
              "Open",
              "Acknowledged",
              "Muted",
              "Mitigated",
              "Ignored",
              "Resolved"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "attributes[severity]",
            "description": "The severity of the exposure between 0 and 10",
            "type": "number",
            "format": "float",
            "required": false
          },
          {
            "in": "formData",
            "name": "attributes[priority]",
            "description": "The priority of the exposure",
            "type": "string",
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "attributes[muted_until]",
            "description": "The date to which to mute the exposure",
            "type": "string",
            "format": "date-time",
            "required": false
          },
          {
            "in": "formData",
            "name": "attributes[comment]",
            "description": "A comment",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "exposure_ids",
            "description": "The IDs of the exposures to bulk edit. Either specify filters or exposure_ids.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[parent_id]",
            "description": "The ID of a parent exposure",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[search]",
            "description": "The search term",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[assigned_to]",
            "description": "The ID(s) of the user to which the exposure is assigned",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[status]",
            "description": "The status(es) to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[collection]",
            "description": "The collection ID(s) to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[severity]",
            "description": "The severity to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[priority]",
            "description": "The priority to filter by",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[asset_id]",
            "description": "The ID of an asset",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[technology_version_id]",
            "description": "The ID of a technology version",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[technology_id]",
            "description": "The ID of a technology",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[created_by_scan_id]",
            "description": "The ID of the scan that first detected the exposure",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[found_by_scan_id]",
            "description": "The ID of the scan that found the exposure",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "created BulkEdit"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "postAsmV01ExposuresBulkEdit"
      }
    },
    "/asm/v0.1/exposures/timeline": {
      "get": {
        "description": "Returns exposure counts for the last 7 days.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "collection_id",
            "description": "The ID of the collection",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns exposure counts for the last 7 days."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01ExposuresTimeline"
      }
    },
    "/asm/v0.1/exposures/count": {
      "get": {
        "description": "Returns a count of exposures by the specified field.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "count_by",
            "description": "When specified, the result set will be a count of exposures by this field",
            "type": "string",
            "enum": [
              "status"
            ],
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a count of exposures by the specified field."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01ExposuresCount"
      }
    },
    "/asm/v0.1/exposures/filters": {
      "get": {
        "description": "Returns a list of filters that can be used to filter assets.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of filters that can be used to filter assets."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01ExposuresFilters"
      }
    },
    "/asm/v0.1/exposures": {
      "get": {
        "description": "Lists all exposures matching the specified criteria.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "sort_field",
            "description": "The field to sort by",
            "type": "string",
            "default": "severity",
            "enum": [
              "user_facing_id",
              "summary",
              "created_at",
              "severity",
              "priority",
              "assigned_to",
              "status",
              "asset",
              "collection",
              "technology_version",
              "exposure_type"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "The direction to sort by",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "asset_id",
            "description": "The ID of the asset",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "created_by_scan_id",
            "description": "When present only new exposures found by this scan will be returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "found_by_scan_id",
            "description": "When present only exposures found by this scan will be returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "technology_version_id",
            "description": "The ID of the technology version",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "description": "The search term",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "assigned_to",
            "description": "The ID(s) of the user to which the exposure is assigned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "status",
            "description": "The statuses to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "priority",
            "description": "The priorities to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "collection",
            "description": "The collection ID(s) to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "severity",
            "description": "The severity to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "export",
            "description": "Set to true to export the results as a CSV file",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "items",
            "description": "Number of items to return per page. Maximum value: 100",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Lists all exposures matching the specified criteria."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01Exposures"
      }
    },
    "/asm/v0.1/scans/{id}/cancel": {
      "post": {
        "description": "cancels a scan",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "cancels a scan"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "postAsmV01ScansIdCancel"
      }
    },
    "/asm/v0.1/scans/{id}": {
      "get": {
        "description": "Gets a scan",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "asset_id",
            "description": "The ID of asset for which to return scan results",
            "type": "string",
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a scan"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01ScansId"
      }
    },
    "/asm/v0.1/scans/filters": {
      "get": {
        "description": "Returns a list of filters that can be used when searching for scans.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of filters that can be used when searching for scans."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01ScansFilters"
      }
    },
    "/asm/v0.1/scans": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "collection_id",
            "description": "The ID of the collection",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "asset_id",
            "description": "When present only scans for the asset with this ID will be returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "sort_field",
            "description": "The field to sort by",
            "type": "string",
            "default": "severity",
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "The direction to sort by",
            "type": "string",
            "default": "desc",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "items",
            "description": "Number of items to return per page. Maximum value: 100",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "get Scan(s)"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01Scans"
      }
    },
    "/asm/v0.1/tasks/{id}/cancel": {
      "post": {
        "description": "Cancels a task",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Cancels a task"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "postAsmV01TasksIdCancel"
      }
    },
    "/asm/v0.1/tasks/{id}/retry": {
      "post": {
        "description": "Tries to re-run a failed task",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Tries to re-run a failed task"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "postAsmV01TasksIdRetry"
      }
    },
    "/asm/v0.1/tasks/{id}/raw-results": {
      "get": {
        "description": "Gets the results log for a task",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets the results log for a task"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01TasksIdRawResults"
      }
    },
    "/asm/v0.1/tasks/{id}": {
      "get": {
        "description": "Gets a task",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a task"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01TasksId"
      }
    },
    "/asm/v0.1/tasks/filters": {
      "get": {
        "description": "Returns a list of filters that can be used to filter tasks",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of filters that can be used to filter tasks"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01TasksFilters"
      }
    },
    "/asm/v0.1/tasks": {
      "get": {
        "description": "Searches for tasks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "scan_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "status",
            "description": "The the status(es) number to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "description": "The task type(s) to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "has_exposures",
            "description": "Show only tasks with or without found exposures",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "name": "target",
            "description": "The task target to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "sort_field",
            "description": "The field to sort by",
            "type": "string",
            "default": "status",
            "enum": [
              "status",
              "duration",
              "started_at",
              "created_at",
              "updated_at",
              "type"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "The direction to sort by",
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "description": "The target search term",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "items",
            "description": "Number of items to return per page. Maximum value: 100",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Searches for tasks"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01Tasks"
      }
    },
    "/asm/v0.1/assets/{id}/whois": {
      "get": {
        "description": "Gets Whois scan results for the specified asset (as a raw test).",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets Whois scan results for the specified asset (as a raw test)."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01AssetsIdWhois"
      }
    },
    "/asm/v0.1/assets/{id}/scan": {
      "post": {
        "description": "Scans the specified asset for issues.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Scans the specified asset for issues."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "postAsmV01AssetsIdScan"
      }
    },
    "/asm/v0.1/assets/{id}": {
      "delete": {
        "description": "Deletes an asset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes an asset"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "deleteAsmV01AssetsId"
      },
      "patch": {
        "description": "Updates an asset",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "under_management",
            "description": "Whether or not to scan the asset",
            "type": "boolean",
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Updates an asset"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "patchAsmV01AssetsId"
      },
      "get": {
        "description": "Gets an asset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets an asset"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01AssetsId"
      }
    },
    "/asm/v0.1/assets/bulk-edit": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "asset_ids",
            "description": "The IDs of the assets to bulk edit",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "formData",
            "name": "attributes[under_management]",
            "description": "Whether or not to scan the assets",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[sort_field]",
            "description": "The field to sort by",
            "type": "string",
            "default": "created_at",
            "enum": [
              "name",
              "created_at",
              "type",
              "collection",
              "priority",
              "under_management",
              "exposures"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[sort_direction]",
            "description": "The direction to sort by",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[search]",
            "description": "The search term",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[collection_id]",
            "description": "The collection ID(s) to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[created_by_scan_id]",
            "description": "When present only assets created by this scan will be returned",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[found_by_scan_id]",
            "description": "When present only assets found by this scan will be returned",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[exposure_severity]",
            "description": "Returns only assets with at least one exposure of the specified severity",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[type]",
            "description": "The type of asset to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[under_management]",
            "description": "Whether or not the asset is under management",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[page]",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "formData",
            "name": "search_filters[items]",
            "description": "Number of items to return per page. Maximum value: 100",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "created BulkEdit"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "postAsmV01AssetsBulkEdit"
      }
    },
    "/asm/v0.1/assets/graph": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "collection_id",
            "description": "Collection IDs to filter by",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "get Graph(s)"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01AssetsGraph"
      }
    },
    "/asm/v0.1/assets/filters": {
      "get": {
        "description": "Returns a list of filters that can be used to filter assets.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of filters that can be used to filter assets."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01AssetsFilters"
      }
    },
    "/asm/v0.1/assets": {
      "get": {
        "description": "Lists all assets matching the specified criteria.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "sort_field",
            "description": "The field to sort by",
            "type": "string",
            "default": "created_at",
            "enum": [
              "name",
              "created_at",
              "type",
              "collection",
              "priority",
              "under_management",
              "exposures"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "sort_direction",
            "description": "The direction to sort by",
            "type": "string",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "required": false
          },
          {
            "in": "query",
            "name": "search",
            "description": "The search term",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "collection_id",
            "description": "The collection ID(s) to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "created_by_scan_id",
            "description": "When present only assets created by this scan will be returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "found_by_scan_id",
            "description": "When present only assets found by this scan will be returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "exposure_severity",
            "description": "Returns only assets with at least one exposure of the specified severity",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "description": "The type of asset to filter by",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "under_management",
            "description": "Whether or not the asset is under management",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "items",
            "description": "Number of items to return per page. Maximum value: 100",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Lists all assets matching the specified criteria."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01Assets"
      }
    },
    "/asm/v0.1/seed-types": {
      "get": {
        "description": "Gets all seed types",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets all seed types"
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01SeedTypes"
      }
    },
    "/asm/v0.1/seeds/{id}": {
      "delete": {
        "description": "Deletes an seed.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes an seed."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "deleteAsmV01SeedsId"
      },
      "patch": {
        "description": "Updates an seed.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "collection_id",
            "description": "The ID of the collection",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "seed_type_id",
            "description": "The seed type ID",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "name",
            "description": "The seed value",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "seed_organization",
            "description": "Organization of the seed",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "seed_api_token",
            "description": "Api token of the seed",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "seed_hostnames",
            "description": "Hostnames linked to the seed",
            "type": "string",
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Updates an seed."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "patchAsmV01SeedsId"
      }
    },
    "/asm/v0.1/seeds": {
      "post": {
        "description": "Add a seed to a collection.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "collection_id",
            "description": "The ID of the collection",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "seed_type_id",
            "description": "The seed type ID",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "name",
            "description": "The seed value",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "seed_organization",
            "description": "Organization of the seed",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "seed_api_token",
            "description": "Api token of the seed",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "seed_hostnames",
            "description": "Hostnames linked to the seed",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Add a seed to a collection."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "postAsmV01Seeds"
      }
    },
    "/asm/v0.1/collections/{id}/reset": {
      "post": {
        "description": "Deletes all exposures, assets, and technology versions in a collection.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Deletes all exposures, assets, and technology versions in a collection."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "postAsmV01CollectionsIdReset"
      }
    },
    "/asm/v0.1/collections/{id}/scan": {
      "post": {
        "description": "Scans a collection for issues.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Scans a collection for issues."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "postAsmV01CollectionsIdScan"
      }
    },
    "/asm/v0.1/collections/{id}": {
      "patch": {
        "description": "Updates a collection.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "description": "The name of the collection",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "priority",
            "description": "The default priority to assign to assets in the collection. 4: Critical, 3: High, 2: Medium, 1: Low",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "scan_at_utc_hour",
            "description": "The hour of the day to scan the collection",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "scan_days_of_week",
            "description": "The days of the week to scan the collection",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "description",
            "description": "A description of the collection",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "send_email_on_scan_start",
            "description": "Whether to send an email when a scan starts",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "send_email_on_scan_finish",
            "description": "Whether to send an email when a scan finishes",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "send_email_only_if_new_or_closed",
            "description": "Whether to send an email only if new or closed exposures are found",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "subscribers",
            "description": "A list of user ids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Updates a collection."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "patchAsmV01CollectionsId"
      },
      "delete": {
        "description": "Deletes a collection.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes a collection."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "deleteAsmV01CollectionsId"
      },
      "get": {
        "description": "Gets a collection.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Gets a collection."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01CollectionsId"
      }
    },
    "/asm/v0.1/collections": {
      "post": {
        "description": "Create a collection.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "name",
            "description": "The name of the collection",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "priority",
            "description": "The default priority to assign to assets in the collection. 4: Critical, 3: High, 2: Medium, 1: Low",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "formData",
            "name": "scan_at_utc_hour",
            "description": "The hour of the day to scan the collection",
            "type": "integer",
            "format": "int32",
            "required": false
          },
          {
            "in": "formData",
            "name": "scan_days_of_week",
            "description": "The days of the week to scan the collection",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "formData",
            "name": "description",
            "description": "A description of the collection",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "send_email_on_scan_start",
            "description": "Whether to send an email when a scan starts",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "send_email_on_scan_finish",
            "description": "Whether to send an email when a scan finishes",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "send_email_only_if_new_or_closed",
            "description": "Whether to send an email only if new or closed exposures are found",
            "type": "boolean",
            "required": false
          },
          {
            "in": "formData",
            "name": "subscribers",
            "description": "A list of user ids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Create a collection."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "postAsmV01Collections"
      },
      "get": {
        "description": "Lists all collections in an organization.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organization_id",
            "description": "The ID of the organization",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "simple",
            "description": "If true, returns all records in simple format - without pagination.",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page offset to fetch.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "required": false
          },
          {
            "in": "query",
            "name": "items",
            "description": "Number of items to return per page. Maximum value: 100",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Lists all collections in an organization."
          }
        },
        "tags": [
          "asm"
        ],
        "operationId": "getAsmV01Collections"
      }
    },
    "/bff/rta/alerts/{alert_id}": {
      "put": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "alert_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated Alert"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "putBffRtaAlertsAlertId"
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "alert_id",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted Alert"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "deleteBffRtaAlertsAlertId"
      }
    },
    "/bff/rta/alerts": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "created Alert"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "postBffRtaAlerts"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "get Alert(s)"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "getBffRtaAlerts"
      }
    },
    "/bff/mtls/chains/{sunfish_chain_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sunfish_chain_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted Chain"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "deleteBffMtlsChainsSunfishChainId"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "sunfish_chain_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated Chain"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "putBffMtlsChainsSunfishChainId"
      }
    },
    "/bff/mtls/chains": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "created Chain"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "postBffMtlsChains"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "get Chain(s)"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "getBffMtlsChains"
      }
    },
    "/bff/mtls/config": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "deleted Config"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "deleteBffMtlsConfig"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "updated Config"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "putBffMtlsConfig"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "get Config(s)"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "getBffMtlsConfig"
      }
    },
    "/bff/rtld/fields": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "profile_type",
            "type": "string",
            "enum": [
              "cdn",
              "rl",
              "waf",
              "bot",
              "cloud_functions"
            ],
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get Field(s)"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "getBffRtldFields"
      }
    },
    "/bff/rtld/countries": {
      "get": {
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "get Country(s)"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "getBffRtldCountries"
      }
    },
    "/bff/rtld/metadata/{metadata_type}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "metadata_type",
            "type": "string",
            "enum": [
              "log-formats",
              "aws-regions",
              "custom-items"
            ],
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get Metadatum(s)"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "getBffRtldMetadataMetadataType"
      }
    },
    "/bff/rtld/{profile_type}/profiles/{profile_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "profile_type",
            "type": "string",
            "enum": [
              "cdn",
              "rl",
              "waf",
              "bot",
              "cloud_functions"
            ],
            "required": true
          },
          {
            "in": "path",
            "name": "profile_id",
            "type": "integer",
            "format": "int64",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted Profile"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "deleteBffRtldProfileTypeProfilesProfileId"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "profile_type",
            "type": "string",
            "enum": [
              "cdn",
              "rl",
              "waf",
              "bot",
              "cloud_functions"
            ],
            "required": true
          },
          {
            "in": "path",
            "name": "profile_id",
            "type": "integer",
            "format": "int64",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated Profile"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "putBffRtldProfileTypeProfilesProfileId"
      }
    },
    "/bff/rtld/{profile_type}/profiles": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "profile_type",
            "type": "string",
            "enum": [
              "cdn",
              "rl",
              "waf",
              "bot",
              "cloud_functions"
            ],
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created Profile"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "postBffRtldProfileTypeProfiles"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "profile_type",
            "type": "string",
            "enum": [
              "cdn",
              "rl",
              "waf",
              "bot",
              "cloud_functions"
            ],
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get Profile(s)"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "getBffRtldProfileTypeProfiles"
      }
    },
    "/bff/rtld/stats": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "created Stat"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "postBffRtldStats"
      }
    },
    "/bff/ids/teams/{team_id}/feature-scopes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get FeatureScope(s)"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "getBffIdsTeamsTeamIdFeatureScopes"
      }
    },
    "/bff/ids/teams/{team_id}/clients/{client_id}/secrets/{secret_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "client_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "secret_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted Secret"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "deleteBffIdsTeamsTeamIdClientsClientIdSecretsSecretId"
      }
    },
    "/bff/ids/teams/{team_id}/clients/{client_id}/secrets": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "client_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created Secret"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "postBffIdsTeamsTeamIdClientsClientIdSecrets"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "client_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get Secret(s)"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "getBffIdsTeamsTeamIdClientsClientIdSecrets"
      }
    },
    "/bff/ids/teams/{team_id}/clients/{client_id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "client_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted Client"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "deleteBffIdsTeamsTeamIdClientsClientId"
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "in": "path",
            "name": "client_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "patched Client"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "patchBffIdsTeamsTeamIdClientsClientId"
      }
    },
    "/bff/ids/teams/{team_id}/clients": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created Client"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "postBffIdsTeamsTeamIdClients"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get Client(s)"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "getBffIdsTeamsTeamIdClients"
      }
    },
    "/bff/ids/teams/{team_id}/integration": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "deleted Integration"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "deleteBffIdsTeamsTeamIdIntegration"
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "patched Integration"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "patchBffIdsTeamsTeamIdIntegration"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created Integration"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "postBffIdsTeamsTeamIdIntegration"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "integer",
            "format": "int32",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get Integration(s)"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "getBffIdsTeamsTeamIdIntegration"
      }
    },
    "/bff/serverless/{query_name}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "query_name",
            "type": "string",
            "enum": [
              "routes",
              "usage-overtime"
            ],
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created Serverless"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "postBffServerlessQueryName"
      }
    },
    "/bff/cwv/{query_name}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "query_name",
            "type": "string",
            "enum": [
              "hosts",
              "filters-metadata",
              "breakdown",
              "worst-pages",
              "events-overtime",
              "views-overtime",
              "ils-worst-pages",
              "histogram",
              "metrics-overtime",
              "summary",
              "summary-by-host",
              "inp-top-contributors"
            ],
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created Cwv"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "postBffCwvQueryName"
      }
    },
    "/bff/cwv/staff-top-hosts": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "created StaffTopHost"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "postBffCwvStaffTopHosts"
      }
    },
    "/bff/traffic/{query_name}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "query_name",
            "type": "string",
            "enum": [
              "origins-countries",
              "origins-overtime",
              "data-usage-overtime",
              "routes",
              "traffic-overtime",
              "errors-overtime",
              "memory-overtime"
            ],
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "created Traffic"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "postBffTrafficQueryName"
      }
    },
    "/bff/traffic/staff-top-hosts": {
      "post": {
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "created StaffTopHost"
          }
        },
        "tags": [
          "bff"
        ],
        "operationId": "postBffTrafficStaffTopHosts"
      }
    },
    "/cache/v0.1/purge-requests/{request_id}": {
      "get": {
        "summary": "Get Purge Request",
        "description": "Retrieves information, including status, about a purge request.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "request_id",
            "description": "The purge request's system-defined ID. This ID is returned by the [Purge Cache operation](#tag/purge-requests/operation/postCacheV01PurgeRequests).\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "cacheScope": [
              "app.cache.purge"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cache_V1_Entities_PurgeRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "purge-requests"
        ],
        "operationId": "getCacheV01PurgeRequestsRequestId"
      }
    },
    "/cache/v0.1/purge-requests": {
      "post": {
        "summary": "Purge Cache",
        "description": "Submits a request to purge cached content from a specific environment. Purging content invalidates the cached version of an asset from our edge servers. You may submit up to 50 concurrent purge requests. For the purpose of concurrency, each value defined within the `values` property is considered a separate purge request. Find out the current status of your purge request by passing the purge request ID, which is returned by the `id` property, to the [Get Purge Request operation](#tag/purge-requests/operation/getCacheV01PurgeRequestsRequestId).\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postCacheV01PurgeRequests",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postCacheV01PurgeRequests"
            }
          }
        ],
        "security": [
          {
            "cacheScope": [
              "app.cache.purge"
            ]
          }
        ],
        "responses": {
          "202": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cache_V1_Entities_PurgeRequest"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "purge-requests"
        ],
        "operationId": "postCacheV01PurgeRequests"
      }
    },
    "/config/v0.1/environment-redirects/{environment_redirect_id}": {
      "delete": {
        "summary": "Delete Bulk Redirect",
        "description": "Deletes a bulk redirect.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "environment_redirect_id",
            "description": "The bulk redirect's system-defined ID.\n\nRetrieve a list of bulk redirects and their system-defined IDs through the [Get All Bulk Redirects operation](#tag/environment-redirects/operation/getConfigV01EnvironmentRedirects).\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_EnvironmentRedirect"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "environment-redirects"
        ],
        "operationId": "deleteConfigV01EnvironmentRedirectsEnvironmentRedirectId"
      },
      "get": {
        "summary": "Get Bulk Redirect",
        "description": "Returns a bulk redirect.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "environment_redirect_id",
            "description": "The bulk redirect's system-defined ID.\n\nRetrieve a list of bulk redirects and their system-defined IDs through the [Get All Bulk Redirects operation](#tag/environment-redirects/operation/getConfigV01EnvironmentRedirects).\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_EnvironmentRedirect"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "environment-redirects"
        ],
        "operationId": "getConfigV01EnvironmentRedirectsEnvironmentRedirectId"
      }
    },
    "/config/v0.1/environment-redirects": {
      "put": {
        "summary": "Set Bulk Redirect",
        "description": "Creates or updates a bulk redirect.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "putConfigV01EnvironmentRedirects",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putConfigV01EnvironmentRedirects"
            }
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_EnvironmentRedirect"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "environment-redirects"
        ],
        "operationId": "putConfigV01EnvironmentRedirects"
      },
      "get": {
        "summary": "Get All Bulk Redirects",
        "description": "Returns all bulk redirects associated with an environment.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "0-based page number.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of results per page. Valid values are: 1 - 100. **Default value:** 20",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          },
          {
            "in": "query",
            "name": "from",
            "description": "Find a bulk redirect by its source URL (`from`).",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "environment_id",
            "description": "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired environment and then click **Settings**. It is listed under **Environment ID**.\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_EnvironmentRedirect_Collection"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "environment-redirects"
        ],
        "operationId": "getConfigV01EnvironmentRedirects"
      }
    },
    "/config/v0.1/environment-variables/{environment_variable_id}": {
      "delete": {
        "summary": "Delete Environment Variable",
        "description": "Deletes an environment variable.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "environment_variable_id",
            "description": "An environment variable's system-defined ID.\n\nUse the [Get All Environment Variables operation](#tag/environment-variables/operation/getConfigV01EnvironmentVariables) to retrieve a list of environment variables and their system-defined IDs.\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_EnvironmentVariable"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "environment-variables"
        ],
        "operationId": "deleteConfigV01EnvironmentVariablesEnvironmentVariableId"
      },
      "get": {
        "summary": "Get Environment Variable",
        "description": "Returns an environment variable.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "environment_variable_id",
            "description": "An environment variable's system-defined ID.\n\nUse the [Get All Environment Variables operation](#tag/environment-variables/operation/getConfigV01EnvironmentVariables) to retrieve a list of environment variables and their system-defined IDs.\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_EnvironmentVariable"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "environment-variables"
        ],
        "operationId": "getConfigV01EnvironmentVariablesEnvironmentVariableId"
      }
    },
    "/config/v0.1/environment-variables": {
      "put": {
        "summary": "Set Environment Variable",
        "description": "Creates or updates an environment variable.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "putConfigV01EnvironmentVariables",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putConfigV01EnvironmentVariables"
            }
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_EnvironmentVariable"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "environment-variables"
        ],
        "operationId": "putConfigV01EnvironmentVariables"
      },
      "get": {
        "summary": "Get All Environment Variables",
        "description": "Returns all environment variables associated with an environment.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "0-based page number.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of results per page. Valid values are: 1 - 100. **Default value:** 20",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          },
          {
            "in": "query",
            "name": "key",
            "description": "Find an environment variable by its name.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "environment_id",
            "description": "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired environment and then click **Settings**. It is listed under **Environment ID**.\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_EnvironmentVariable_Collection"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "environment-variables"
        ],
        "operationId": "getConfigV01EnvironmentVariables"
      }
    },
    "/config/v0.1/tls-certs/{cert_id}": {
      "get": {
        "summary": "Get TLS Certificate",
        "description": "Returns a TLS certificate.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cert_id",
            "description": "The TLS certificate's system-defined ID. Use the [Get All Certificates operation](#tag/tls-certs/operation/getConfigV01TlsCerts) to retrieve a list of TLS certificates and their system-defined IDs.\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_TlsCert"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "tls-certs"
        ],
        "operationId": "getConfigV01TlsCertsCertId"
      }
    },
    "/config/v0.1/tls-certs/generate": {
      "post": {
        "summary": "Generate TLS Certificates",
        "description": "Generates a Let's Encrypt certificate for each eligible hostname associated with the specified environment. A hostname is eligible for automatic certificate generation when the CA is allowed to issue certificates for that hostname and your control over the domain is established through an `_acme_challenge` CNAME record. [Learn more.](https://docs.edg.io/applications/basics/hostnames#https-traffic)",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postConfigV01TlsCertsGenerate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postConfigV01TlsCertsGenerate"
            }
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_TlsCert"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "tls-certs"
        ],
        "operationId": "postConfigV01TlsCertsGenerate"
      }
    },
    "/config/v0.1/tls-certs": {
      "post": {
        "summary": "Upload TLS Certificate",
        "description": "Upload your TLS certificate to activate it within a specific environment.",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postConfigV01TlsCerts",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postConfigV01TlsCerts"
            }
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_TlsCert"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "tls-certs"
        ],
        "operationId": "postConfigV01TlsCerts"
      },
      "get": {
        "summary": "Get All TLS Certificates",
        "description": "Returns all TLS certificates associated with an environment.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "0-based page number.",
            "type": "integer",
            "format": "int32",
            "default": 0,
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "Number of results per page. Valid values are: 1 - 100. **Default value:** 20",
            "type": "integer",
            "format": "int32",
            "default": 20,
            "required": false
          },
          {
            "in": "query",
            "name": "environment_id",
            "description": "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired environment and then click **Settings**. It is listed under **Environment ID**.\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_TlsCert_Collection"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "tls-certs"
        ],
        "operationId": "getConfigV01TlsCerts"
      }
    },
    "/config/v0.1/deployments/{deployment_id}/logs": {
      "get": {
        "summary": "Get Deployment Logs",
        "description": "Retrieve log data for a specific deployment.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_id",
            "description": "The deployment's system-defined ID. This ID is returned by the [Deploy CDN Configuration operation's](#tag/configs/operation/postConfigV01Configs) `id` property.\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_Deployment_Logs"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "deployments"
        ],
        "operationId": "getConfigV01DeploymentsDeploymentIdLogs"
      }
    },
    "/config/v0.1/deployments/{deployment_id}": {
      "get": {
        "summary": "Get Deployment",
        "description": "Retrieve information about a specific deployment.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deployment_id",
            "description": "The deployment's system-defined ID. This ID is returned by the [Deploy CDN Configuration operation's](#tag/configs/operation/postConfigV01Configs) `id` property.\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_Deployment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "deployments"
        ],
        "operationId": "getConfigV01DeploymentsDeploymentId"
      }
    },
    "/config/v0.1/configs/{config_id}": {
      "get": {
        "summary": "Get CDN Configuration",
        "description": "Retrieve an environment's origin configurations, hostnames, rules, and experiments.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "config_id",
            "description": "The system-defined ID for a configuration that was deployed to an environment.\n\nUse the [Get Environment operation](#tag/environments/operation/getAccountsV01EnvironmentsEnvironmentId) to retrieve the system-defined ID (`@links.active_config.id`) for an environment's active configuration.\n",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_Config"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "configs"
        ],
        "operationId": "getConfigV01ConfigsConfigId"
      }
    },
    "/config/v0.1/configs": {
      "post": {
        "summary": "Deploy CDN Configuration",
        "description": "Deploys your configuration to a specific environment. This deployment overwrites any existing origin configurations, hostnames, rules, and experiments.\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "postConfigV01Configs",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postConfigV01Configs"
            }
          }
        ],
        "security": [
          {
            "configScope": [
              "app.config"
            ]
          }
        ],
        "responses": {
          "202": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Config_V1_Entities_Config"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UserError"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_UnauthorizedError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ForbiddenError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_RecordNotFoundError"
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_TooManyRequestsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/BaseApi_Entities_Error_ServerError"
            }
          }
        },
        "tags": [
          "configs"
        ],
        "operationId": "postConfigV01Configs"
      }
    }
  },
  "definitions": {
    "Accounts_V1_Entities_Member": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "description": "The user's role."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The user's creation date and time (UTC)."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The user's last modification date and time (UTC)."
        },
        "user_email": {
          "type": "string",
          "description": "The user's email."
        },
        "environment_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Accounts_V1_Entities_EnvironmentRole"
          },
          "description": "List of environment roles."
        },
        "property_roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Accounts_V1_Entities_PropertyRole"
          },
          "description": "List of property roles."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Accounts_V1_Entities_Member model"
    },
    "Accounts_V1_Entities_EnvironmentRole": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string"
        },
        "environment_id": {
          "type": "string",
          "description": "Environment ID"
        },
        "role": {
          "type": "string",
          "description": "The user's role."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The user's creation date and time (UTC)."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The user's last modification date and time (UTC)."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ]
    },
    "Accounts_V1_Entities_PropertyRole": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string"
        },
        "property_id": {
          "type": "string",
          "description": "Property ID"
        },
        "role": {
          "type": "string",
          "description": "The user's role."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The user's creation date and time (UTC)."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The user's last modification date and time (UTC)."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ]
    },
    "BaseApi_Entities_Error_UserError": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "example": "Error",
          "description": "The error type."
        },
        "code": {
          "type": "string",
          "enum": [
            "invalid_input"
          ],
          "description": "A human readable error code following `snake_case`."
        },
        "title": {
          "type": "string",
          "enum": [
            "Bad request"
          ],
          "description": "The main error heading."
        },
        "description": {
          "type": "string",
          "example": [
            "Request has one or more errors and cannot be processed"
          ],
          "description": "Detailed description about the error."
        },
        "status_code": {
          "type": "integer",
          "format": "int32",
          "enum": [
            400
          ],
          "description": "Represents the HTTP status code associated with the response."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseApi_Entities_BaseHyperionErrorDetail"
          },
          "description": "Describes the error."
        }
      },
      "required": [
        "@type",
        "title"
      ],
      "description": "BaseApi_Entities_Error_UserError model"
    },
    "BaseApi_Entities_BaseHyperionErrorDetail": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "example": "ErrorDetail",
          "description": "The error detail type."
        },
        "description": {
          "type": "string",
          "description": "Detail description about the error."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "source": {
          "type": "string",
          "description": "JSON Pointer"
        }
      },
      "required": [
        "@type",
        "description"
      ]
    },
    "BaseApi_Entities_Error_UnauthorizedError": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "example": "Error",
          "description": "The error type."
        },
        "code": {
          "type": "string",
          "enum": [
            "unauthorized"
          ],
          "description": "A human readable error code following `snake_case`."
        },
        "title": {
          "type": "string",
          "enum": [
            "Unauthorized"
          ],
          "description": "The main error heading."
        },
        "description": {
          "type": "string",
          "example": [
            "Request did not include a required authentication component"
          ],
          "description": "Detailed description about the error."
        },
        "status_code": {
          "type": "integer",
          "format": "int32",
          "enum": [
            401
          ],
          "description": "Represents the HTTP status code associated with the response."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseApi_Entities_BaseHyperionErrorDetail"
          },
          "description": "Describes the error."
        }
      },
      "required": [
        "@type",
        "title"
      ],
      "description": "BaseApi_Entities_Error_UnauthorizedError model"
    },
    "BaseApi_Entities_Error_ForbiddenError": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "example": "Error",
          "description": "The error type."
        },
        "code": {
          "type": "string",
          "enum": [
            "forbidden"
          ],
          "description": "A human readable error code following `snake_case`."
        },
        "title": {
          "type": "string",
          "enum": [
            "Forbidden"
          ],
          "description": "The main error heading."
        },
        "description": {
          "type": "string",
          "example": [
            "Request has failed authorization checks"
          ],
          "description": "Detailed description about the error."
        },
        "status_code": {
          "type": "integer",
          "format": "int32",
          "enum": [
            403
          ],
          "description": "Represents the HTTP status code associated with the response."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseApi_Entities_BaseHyperionErrorDetail"
          },
          "description": "Describes the error."
        }
      },
      "required": [
        "@type",
        "title"
      ],
      "description": "BaseApi_Entities_Error_ForbiddenError model"
    },
    "BaseApi_Entities_Error_RecordNotFoundError": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "example": "Error",
          "description": "The error type."
        },
        "code": {
          "type": "string",
          "enum": [
            "not_found"
          ],
          "description": "A human readable error code following `snake_case`."
        },
        "title": {
          "type": "string",
          "enum": [
            "Not found"
          ],
          "description": "The main error heading."
        },
        "description": {
          "type": "string",
          "example": [
            "Resource not found"
          ],
          "description": "Detailed description about the error."
        },
        "status_code": {
          "type": "integer",
          "format": "int32",
          "enum": [
            404
          ],
          "description": "Represents the HTTP status code associated with the response."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseApi_Entities_BaseHyperionErrorDetail"
          },
          "description": "Describes the error."
        }
      },
      "required": [
        "@type",
        "title"
      ],
      "description": "BaseApi_Entities_Error_RecordNotFoundError model"
    },
    "BaseApi_Entities_Error_TooManyRequestsError": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "example": "Error",
          "description": "The error type."
        },
        "code": {
          "type": "string",
          "enum": [
            "rate_limit_reached"
          ],
          "description": "A human readable error code following `snake_case`."
        },
        "title": {
          "type": "string",
          "enum": [
            "Too many requests"
          ],
          "description": "The main error heading."
        },
        "description": {
          "type": "string",
          "example": [
            "Too many requests have been received in a given amount of time"
          ],
          "description": "Detailed description about the error."
        },
        "status_code": {
          "type": "integer",
          "format": "int32",
          "enum": [
            429
          ],
          "description": "Represents the HTTP status code associated with the response."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseApi_Entities_BaseHyperionErrorDetail"
          },
          "description": "Describes the error."
        }
      },
      "required": [
        "@type",
        "title"
      ],
      "description": "BaseApi_Entities_Error_TooManyRequestsError model"
    },
    "BaseApi_Entities_Error_ServerError": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "example": "Error",
          "description": "The error type."
        },
        "code": {
          "type": "string",
          "enum": [
            "internal_error"
          ],
          "description": "A human readable error code following `snake_case`."
        },
        "title": {
          "type": "string",
          "enum": [
            "Internal server error"
          ],
          "description": "The main error heading."
        },
        "description": {
          "type": "string",
          "example": [
            "Something went wrong. Please try again later and contact support if the problem persists."
          ],
          "description": "Detailed description about the error."
        },
        "status_code": {
          "type": "integer",
          "format": "int32",
          "enum": [
            500
          ],
          "description": "Represents the HTTP status code associated with the response."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseApi_Entities_BaseHyperionErrorDetail"
          },
          "description": "Describes the error."
        }
      },
      "required": [
        "@type",
        "title"
      ],
      "description": "BaseApi_Entities_Error_ServerError model"
    },
    "patchAccountsV01MembersMemberId": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string",
          "enum": [
            "viewer",
            "purger",
            "security_auditor",
            "security_manager",
            "editor",
            "maintainer",
            "admin"
          ]
        },
        "property_roles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "description": "User property role",
                "enum": [
                  "viewer",
                  "purger",
                  "editor",
                  "maintainer"
                ]
              },
              "property_id": {
                "type": "string",
                "description": "Property ID (uuid)"
              }
            },
            "required": [
              "role",
              "property_id"
            ]
          }
        },
        "environment_roles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "description": "User environment role",
                "enum": [
                  "viewer",
                  "purger",
                  "editor",
                  "maintainer"
                ]
              },
              "environment_id": {
                "type": "string",
                "description": "Environment ID (uuid)"
              }
            },
            "required": [
              "role",
              "environment_id"
            ]
          }
        }
      }
    },
    "postAccountsV01Members": {
      "type": "object",
      "properties": {
        "user_email": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": [
            "viewer",
            "purger",
            "security_auditor",
            "security_manager",
            "editor",
            "maintainer",
            "admin"
          ]
        },
        "property_roles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "description": "User property role",
                "enum": [
                  "viewer",
                  "purger",
                  "editor",
                  "maintainer"
                ]
              },
              "property_id": {
                "type": "string",
                "description": "Property ID (uuid)"
              }
            },
            "required": [
              "role",
              "property_id"
            ]
          }
        },
        "environment_roles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "description": "User environment role",
                "enum": [
                  "viewer",
                  "purger",
                  "editor",
                  "maintainer"
                ]
              },
              "environment_id": {
                "type": "string",
                "description": "Environment ID (uuid)"
              }
            },
            "required": [
              "role",
              "environment_id"
            ]
          }
        }
      },
      "required": [
        "user_email",
        "organization_id"
      ]
    },
    "Accounts_V1_Entities_Member_Collection": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionNavigationLinks",
          "description": "Links to related resources."
        },
        "total_items": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Accounts_V1_Entities_Member"
          },
          "description": "List of users."
        }
      },
      "required": [
        "@type",
        "@id"
      ],
      "description": "Accounts_V1_Entities_Member_Collection model"
    },
    "BaseApi_Entities_HyperionNavigationLinks": {
      "type": "object",
      "properties": {
        "first": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionLink",
          "description": "Link to the first page of results."
        },
        "next": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionLink",
          "description": "Link to the next page of results."
        },
        "previous": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionLink",
          "description": "Link to the previous page of results."
        },
        "last": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionLink",
          "description": "Link to the last page of results."
        }
      }
    },
    "BaseApi_Entities_HyperionLink": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "base_path": {
          "type": "string"
        }
      }
    },
    "Accounts_V1_Entities_Environment": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "The resource's system-defined ID."
        },
        "property_id": {
          "type": "string",
          "description": "The system-defined ID for the property associated with this environment."
        },
        "legacy_account_number": {
          "type": "string",
          "description": "The system-defined account number for this environment. Use this account number when requesting legacy APIs. This account number is unavailable immediately after an environment is created. If it is missing, try retrieving the environment again."
        },
        "name": {
          "type": "string",
          "description": "The environment's name."
        },
        "can_members_deploy": {
          "type": "boolean",
          "description": "Deprecated by the `only_maintainers_can_deploy` property."
        },
        "only_maintainers_can_deploy": {
          "type": "boolean",
          "description": "Determines whether Editors will be restricted to read-only access. Enabling this option restricts configuration and deployments to deploy tokens, Maintainers, and Admins."
        },
        "http_request_logging": {
          "type": "boolean",
          "description": "Determines whether deep-request inspection for serverless logs will be enabled."
        },
        "default_domain_name": {
          "type": "string",
          "description": "The default hostname through which traffic for this environment is served."
        },
        "pci_compliance": {
          "type": "boolean",
          "description": "Determines whether this environment's traffic will be restricted to our PCI-compliant network or served through our entire network."
        },
        "dns_domain_name": {
          "type": "string",
          "description": "Serve traffic for this environment by pointing your CNAMEs to this domain."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The environment's creation date and time (UTC)."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The environment's last modification date and time (UTC)."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Accounts_V1_Entities_Environment model"
    },
    "patchAccountsV01EnvironmentsEnvironmentId": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The environment's name. This name may only consist of lowercase characters, numbers, dashes, and underscores.\n"
        },
        "can_members_deploy": {
          "type": "boolean",
          "description": "Determines whether all organization memmbers may deploy to this environment. Disabling this option restricts deployments to admin users and the deploy token.\n"
        },
        "http_request_logging": {
          "type": "boolean",
          "description": "Determines whether deep-request inspection for serverless logs will be enabled."
        },
        "preserve_cache": {
          "type": "boolean",
          "description": "Determines whether deploying a new build to this environment will use the same cache as the previous deployment.\n"
        }
      },
      "description": "Updates an environment."
    },
    "postAccountsV01Environments": {
      "type": "object",
      "properties": {
        "property_id": {
          "type": "string",
          "description": "The property's system-defined ID."
        },
        "name": {
          "type": "string",
          "description": "The environment's name. This name may only consist of lowercase characters, numbers, dashes, and underscores.\n"
        },
        "can_members_deploy": {
          "type": "boolean",
          "description": "Deprecated by the `only_maintainers_can_deploy` property.\"\n"
        },
        "only_maintainers_can_deploy": {
          "type": "boolean",
          "description": "Determines whether Editors will be restricted to read-only access. Enabling this option restricts configuration and deployments to deploy tokens, Maintainers, and Admins.\n"
        },
        "http_request_logging": {
          "type": "boolean",
          "description": "Determines whether deep-request inspection for serverless logs will be enabled."
        }
      },
      "required": [
        "property_id",
        "name"
      ],
      "description": "Creates an environment."
    },
    "Accounts_V1_Entities_Environment_Collection": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionNavigationLinks",
          "description": "Links to related resources."
        },
        "total_items": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Accounts_V1_Entities_Environment"
          },
          "description": "List of environments."
        }
      },
      "required": [
        "@type",
        "@id"
      ],
      "description": "Accounts_V1_Entities_Environment_Collection model"
    },
    "Accounts_V1_Entities_Property": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "The resource's system-defined ID."
        },
        "organization_id": {
          "type": "string",
          "description": "An organization's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired organization and then click **Settings**. It is listed under **Organization ID**.\n"
        },
        "slug": {
          "type": "string",
          "description": "The property's name."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The property's creation date and time (UTC)."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The property's last modification date and time (UTC)."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Accounts_V1_Entities_Property model"
    },
    "patchAccountsV01PropertiesPropertyId": {
      "type": "object",
      "properties": {
        "slug": {
          "type": "string",
          "description": "The property's name. Space characters are converted to dashes."
        }
      },
      "description": "Update a property."
    },
    "postAccountsV01Properties": {
      "type": "object",
      "properties": {
        "slug": {
          "type": "string",
          "description": "The property's name. Space characters are converted to dashes."
        },
        "organization_id": {
          "type": "string",
          "description": "The system-defined ID for the organization under which this property will be created."
        }
      },
      "required": [
        "slug",
        "organization_id"
      ],
      "description": "Create a property."
    },
    "Accounts_V1_Entities_Property_Collection": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionNavigationLinks",
          "description": "Links to related resources."
        },
        "total_items": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Accounts_V1_Entities_Property"
          },
          "description": "List of properties."
        }
      },
      "required": [
        "@type",
        "@id"
      ],
      "description": "Accounts_V1_Entities_Property_Collection model"
    },
    "Accounts_V1_Entities_Organization": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "The resource's system-defined ID."
        },
        "partner_id": {
          "type": "string",
          "description": "The system-defined ID for the partner account under which the organization was created."
        },
        "name": {
          "type": "string",
          "description": "The organization's name"
        },
        "pci_compliance": {
          "type": "string",
          "enum": [
            "pci",
            "non_pci",
            "mixed"
          ],
          "description": "The organization's PCI compliance status. This state is determined by checking PCI-compliance across all environments associated with this organization. Valid values are:\n\n-   **pci:** All environments are PCI-compliant.\n-   **non_pci:** All environments use our entire network.\n-   **mixed:** Some environments are PCI-compliant.\n"
        },
        "pci_dns_domain_name": {
          "type": "string",
          "description": "The organization's PCI-compliant DNS domain.\n\nServe traffic through our PCI-compliant network by pointing your CNAMEs to this domain.\n"
        },
        "non_pci_dns_domain_name": {
          "type": "string",
          "description": "The organization's DNS domain for standard traffic. Standard traffic can use our entire network.\n\nServe traffic that does not require PCI-compliance by pointing your CNAMEs to this domain.\n"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The organization's creation date and time (UTC)."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The organization's last modification date and time (UTC)."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Accounts_V1_Entities_Organization model"
    },
    "patchAccountsV01OrganizationsOrganizationId": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The organization's name."
        }
      },
      "description": "Updates an organization."
    },
    "Cache_V1_Entities_PurgeRequest": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "The purge request's system-defined ID."
        },
        "status": {
          "type": "string",
          "description": "The purge request's status. Valid values are:\n  - `in_progress`: Edgio is still purging content.\n  - `done`: Edgio has purged the requested content.\n"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time (UTC) at which the purge request was submitted."
        },
        "completed_at": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time (UTC) at which the purge request was completed."
        },
        "progress_percentage": {
          "type": "number",
          "format": "float",
          "description": "The purge request's completion percentage."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Cache_V1_Entities_PurgeRequest model"
    },
    "postCacheV01PurgeRequests": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string",
          "description": "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired environment and then click **Settings**. It is listed under **Environment ID**.\n"
        },
        "purge_type": {
          "type": "string",
          "description": "- `all_entries`: Purge all cached content.\n- `path`: Purge one or more relative path(s) defined within the `values` property.\n- `surrogate_key`: Purge one or more surrogate key(s) defined within the `values` property.\n",
          "enum": [
            "all_entries",
            "path",
            "surrogate_key"
          ]
        },
        "values": {
          "type": "array",
          "description": "Defines the set of content to be purged. The `purge_type` property's value determines what should be passed.\n  - `all_entries`: Omit this property or pass an empty array.\n  - `path`: Pass one or more relative path(s). This relative path starts directly after the hostname.\n  - `surrogate_key`: Pass one or more surrogate key(s) (aka cache tags).\n",
          "items": {
            "type": "string"
          }
        },
        "hostname": {
          "type": "string",
          "description": "If specified, cached paths will only be purged for this specific hostname.\nIf omitted, the specified paths will be purged for all hostnames.\n",
          "default": null
        }
      },
      "required": [
        "environment_id",
        "purge_type"
      ],
      "description": "Submits a request to purge cached content from a specific environment. Purging content invalidates the cached version of an asset from our edge servers. You may submit up to 50 concurrent purge requests. For the purpose of concurrency, each value defined within the `values` property is considered a separate purge request. Find out the current status of your purge request by passing the purge request ID, which is returned by the `id` property, to the [Get Purge Request operation](#tag/purge-requests/operation/getCacheV01PurgeRequestsRequestId).\n"
    },
    "Config_V1_Entities_EnvironmentRedirect": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "The resource's system-defined ID."
        },
        "environment_id": {
          "type": "string",
          "description": "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired environment and then click **Settings**. It is listed under **Environment ID**.\n"
        },
        "from": {
          "type": "string",
          "description": "An absolute or relative URL that will be redirected. "
        },
        "to": {
          "type": "string",
          "description": "An absolute or relative URL to which clients will be redirected."
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "`3xx` status code for the response sent to the client.\nValid values are: `301 | 302 | 307 | 308`\n"
        },
        "forward_query_string": {
          "type": "boolean",
          "description": "Determines whether the `Location` response header will include the request’s query string."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The bulk redirect's creation date and time (UTC)."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The bulk redirect's last modification date and time (UTC)."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Config_V1_Entities_EnvironmentRedirect model"
    },
    "putConfigV01EnvironmentRedirects": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string",
          "description": "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired environment and then click **Settings**. It is listed under **Environment ID**.\n"
        },
        "from": {
          "type": "string",
          "description": "An absolute or relative URL that will be redirected."
        },
        "to": {
          "type": "string",
          "description": "An absolute or relative URL to which clients will be redirected."
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "`3xx` status code for the response sent to the client. Valid values are: `301 | 302 | 307 | 308`"
        },
        "forward_query_string": {
          "type": "boolean",
          "description": "Determines whether the `Location` response header will include the request’s query string."
        }
      },
      "required": [
        "environment_id",
        "from",
        "to"
      ],
      "description": "Creates or updates a bulk redirect."
    },
    "Config_V1_Entities_EnvironmentRedirect_Collection": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionNavigationLinks",
          "description": "Links to related resources."
        },
        "total_items": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_V1_Entities_EnvironmentRedirect"
          },
          "description": "List of bulk redirects."
        }
      },
      "required": [
        "@type",
        "@id"
      ],
      "description": "Config_V1_Entities_EnvironmentRedirect_Collection model"
    },
    "Config_V1_Entities_EnvironmentVariable": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "The resource's system-defined ID."
        },
        "environment_id": {
          "type": "string",
          "description": "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired environment and then click **Settings**. It is listed under **Environment ID**.\n"
        },
        "key": {
          "type": "string",
          "description": "The environment variable's name."
        },
        "value": {
          "type": "string",
          "description": "The environment variable's value."
        },
        "secret": {
          "type": "boolean",
          "description": "Determines whether the environment variable's value will be partially masked using asterisks.\n"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The environment variable's creation date and time (UTC)."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The environment variable's last modification date and time (UTC)."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Config_V1_Entities_EnvironmentVariable model"
    },
    "putConfigV01EnvironmentVariables": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string",
          "description": "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired environment and then click **Settings**. It is listed under **Environment ID**.\n"
        },
        "key": {
          "type": "string",
          "description": "The environment variable's name."
        },
        "value": {
          "type": "string",
          "description": "The environment variable's value."
        },
        "secret": {
          "type": "boolean",
          "description": "Determines whether the environment variable's value will be partially masked using asterisks.\n"
        }
      },
      "required": [
        "environment_id",
        "key",
        "value"
      ],
      "description": "Creates or updates an environment variable."
    },
    "Config_V1_Entities_EnvironmentVariable_Collection": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionNavigationLinks",
          "description": "Links to related resources."
        },
        "total_items": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_V1_Entities_EnvironmentVariable"
          },
          "description": "List of environment variables."
        }
      },
      "required": [
        "@type",
        "@id"
      ],
      "description": "Config_V1_Entities_EnvironmentVariable_Collection model"
    },
    "Config_V1_Entities_TlsCert": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "The resource's system-defined ID."
        },
        "environment_id": {
          "type": "string",
          "description": "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired environment and then click **Settings**. It is listed under **Environment ID**.\n"
        },
        "primary_cert": {
          "type": "string",
          "description": "Primary certificate. Not returned for records in collection."
        },
        "intermediate_cert": {
          "type": "string",
          "description": "Intermediate certificate. Not returned for records in collection"
        },
        "expiration": {
          "type": "string",
          "format": "date-time",
          "description": "The TLS certificate's expiration date and time (UTC)."
        },
        "status": {
          "type": "string",
          "description": "The TLS certificate's status. Returns one of the following states:\n\n-  `created`: The TLS certificate has been created, but it has not yet been activated.\n-  `activating:` Edgio is in the process of activating the TLS certificate.\n-  `activated:` The TLS certificate is currently active.\n-  `failed:` The activation of the TLS certificate failed.\n-  `expired:` The TLS certificate has expired.\n"
        },
        "generated": {
          "type": "boolean",
          "description": "Returns `true` for TLS certificates generated by Edgio. Returns `false` for existing TLS certificates that were uploaded to Edgio.\n"
        },
        "serial": {
          "type": "string",
          "description": "The TLS certificate's serial number."
        },
        "common_name": {
          "type": "string",
          "description": "The TLS certificate's common name (CN)."
        },
        "alternative_names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The TLS certificate's Subject Alternative Names (SAN)."
        },
        "activation_error": {
          "type": "string",
          "description": "Contains an error message if the TLS certificate could not be activated. "
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The TLS certificate's creation date and time (UTC)."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "The TLS certificate's last modification date and time (UTC)."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Config_V1_Entities_TlsCert model"
    },
    "postConfigV01TlsCertsGenerate": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string",
          "description": "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired environment and then click **Settings**. It is listed under **Environment ID**.\n"
        }
      },
      "required": [
        "environment_id"
      ],
      "description": "Generates a Let's Encrypt certificate for each eligible hostname associated with the specified environment. A hostname is eligible for automatic certificate generation when the CA is allowed to issue certificates for that hostname and your control over the domain is established through an `_acme_challenge` CNAME record. [Learn more.](https://docs.edg.io/applications/basics/hostnames#https-traffic)"
    },
    "postConfigV01TlsCerts": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string",
          "description": "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired environment and then click **Settings**. It is listed under **Environment ID**.\n"
        },
        "primary_cert": {
          "type": "string",
          "description": "Your TLS certificate. We require this certificate to be issued by a Certificate Authority."
        },
        "intermediate_cert": {
          "type": "string",
          "description": "The intermediate certificates (IC) used by the CA, including the CA’s signing certificate."
        },
        "private_key": {
          "type": "string",
          "description": "The private key that was generated with the CSR."
        }
      },
      "required": [
        "environment_id",
        "primary_cert",
        "intermediate_cert"
      ],
      "description": "Upload your TLS certificate to activate it within a specific environment."
    },
    "Config_V1_Entities_TlsCert_Collection": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "$ref": "#/definitions/BaseApi_Entities_HyperionNavigationLinks",
          "description": "Links to related resources."
        },
        "total_items": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of items."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_V1_Entities_TlsCert"
          },
          "description": "List of TLS certificates associated with the specified environment."
        }
      },
      "required": [
        "@type",
        "@id"
      ],
      "description": "Config_V1_Entities_TlsCert_Collection model"
    },
    "Config_V1_Entities_Deployment_Logs": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_V1_Entities_Deployment_LogLine"
          },
          "description": "The deployment's log messages."
        }
      },
      "required": [
        "@type",
        "@id"
      ],
      "description": "Config_V1_Entities_Deployment_Logs model"
    },
    "Config_V1_Entities_Deployment_LogLine": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Log message."
        },
        "level": {
          "type": "string",
          "description": "Log level."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time (UTC) at which the message was logged."
        }
      }
    },
    "Config_V1_Entities_Deployment": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "The resource's system-defined ID."
        },
        "status": {
          "type": "string",
          "description": "Indicates the deployment's status. Valid values are:\n  - `created`: The deployment has been created but has not yet been deployed.\n  - `uploading`: The CLI is uploading the build. This state is only applicable for EdgeJS deployments.\n  - `provisioning`: The CDN is provisioning the environment.\n  - `deploying`: The build is being deployed to our network.\n  - `waiting`: The build is being propagated throughout our network.\n  - `completed`: The build was deployed successfully to our network.\n  - `canceled`: The deployment was canceled.\n  - `failed`: The deployment has failed.\n"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time (UTC) at which the deployment was submitted."
        },
        "completed_at": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time (UTC) at which the deployment was completed."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Config_V1_Entities_Deployment model"
    },
    "Config_V1_Entities_Config": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "The resource's type."
        },
        "@id": {
          "type": "string",
          "description": "The resource's relative path."
        },
        "@links": {
          "type": "object",
          "description": "Links to related resources."
        },
        "id": {
          "type": "string",
          "description": "The resource's system-defined ID."
        },
        "origins": {
          "type": "string",
          "example": [
            {
              "name": "web",
              "hosts": [
                {
                  "location": [
                    {
                      "hostname": "https://test-origin.edgio.net"
                    }
                  ]
                }
              ]
            }
          ],
          "description": "List of origin configurations.\n\nYou cannot delete or change the name of an origin configuration that has been mapped to a hostname. Attempting to do so will generate a `404 Bad Request` whose error message is similar to the following one:\n\n`Invalid config: Schema validation error: properties.0.hostnames.0: Origin 'web' not found`\n\nDefined externally: https://api.vdms.io/cdn/edge-control/v1/configuration/schema#/definitions/property/properties/origins\n"
        },
        "hostnames": {
          "type": "string",
          "example": [
            {
              "hostname": "cdn.example.com"
            }
          ],
          "description": "List of hostnames. Defined externally: https://api.vdms.io/cdn/edge-control/v1/configuration/schema#/definitions/property/properties/hostnames"
        },
        "rules": {
          "type": "string",
          "example": [
            {
              "if": [
                {
                  "==": [
                    {
                      "request": "path"
                    },
                    "/api/:path"
                  ]
                },
                {
                  "caching": {
                    "bypass_cache": true
                  }
                }
              ]
            }
          ],
          "description": "List of rules defined using JSON syntax.\n\nView your current set of rules in JSON syntax from within the Edgio Console by navigating to the **Rules** page and then clicking **JSON Editor**.\n\nDefined externally: https://api.vdms.io/cdn/edge-control/v1/configuration/schema#/definitions/property/properties/rules\n"
        },
        "experiments": {
          "type": "string",
          "example": [
            {}
          ],
          "description": "List of experiments."
        }
      },
      "required": [
        "@type",
        "@id",
        "id"
      ],
      "description": "Config_V1_Entities_Config model"
    },
    "postConfigV01Configs": {
      "type": "object",
      "properties": {
        "environment_id": {
          "type": "string",
          "description": "An environment's system-defined ID (e.g., 12345678-1234-1234-1234-1234567890ab).\n\nFrom the Edgio Console, navigate to the desired environment and then click **Settings**. It is listed under **Environment ID**.\n"
        },
        "origins": {
          "type": "array",
          "description": "List of origin configurations.\n\nYou cannot delete or change the name of an origin configuration that has been mapped to a hostname. Attempting to do so will generate a `404 Bad Request` whose error message is similar to the following one:\n\n`Invalid config: Schema validation error: properties.0.hostnames.0: Origin 'web' not found`\n\nDefined externally: https://api.vdms.io/cdn/edge-control/v1/configuration/schema#/definitions/property/properties/origins\n",
          "items": {
            "type": "string"
          },
          "example": [
            {
              "name": "web",
              "hosts": [
                {
                  "location": [
                    {
                      "hostname": "https://test-origin.edgio.net"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "hostnames": {
          "type": "array",
          "description": "List of hostnames. Defined externally: https://api.vdms.io/cdn/edge-control/v1/configuration/schema#/definitions/property/properties/hostnames",
          "items": {
            "type": "string"
          },
          "example": [
            {
              "hostname": "cdn.example.com"
            }
          ]
        },
        "rules": {
          "type": "array",
          "description": "List of rules defined using JSON syntax.\n\nView your current set of rules in JSON syntax from within the Edgio Console by navigating to the **Rules** page and then clicking **JSON Editor**.\n\nDefined externally: https://api.vdms.io/cdn/edge-control/v1/configuration/schema#/definitions/property/properties/rules\n",
          "items": {
            "type": "string"
          },
          "example": [
            {
              "if": [
                {
                  "==": [
                    {
                      "request": "path"
                    },
                    "/api/:path"
                  ]
                },
                {
                  "caching": {
                    "bypass_cache": true
                  }
                }
              ]
            }
          ]
        },
        "experiments": {
          "type": "array",
          "description": "List of experiments.",
          "items": {
            "type": "string"
          },
          "example": [
            {}
          ]
        },
        "purge_cache_on_deploy": {
          "type": "boolean",
          "description": "Overwrite the default value, effectively allowing defining purge cache behaviour with each deployment.\n",
          "example": true
        }
      },
      "required": [
        "environment_id",
        "origins",
        "hostnames"
      ],
      "description": "Deploys your configuration to a specific environment. This deployment overwrites any existing origin configurations, hostnames, rules, and experiments.\n"
    }
  }
}
